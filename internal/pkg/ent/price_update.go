// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/plan"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
	"github.com/pepeunlimited/prices/internal/pkg/ent/product"
	"github.com/pepeunlimited/prices/internal/pkg/ent/thirdparty"
)

// PriceUpdate is the builder for updating Price entities.
type PriceUpdate struct {
	config
	start_at            *time.Time
	end_at              *time.Time
	price               *uint16
	addprice            *uint16
	discount            *uint16
	adddiscount         *uint16
	products            map[int]struct{}
	third_parties       map[int]struct{}
	plans               map[int]struct{}
	clearedProducts     bool
	clearedThirdParties bool
	clearedPlans        bool
	predicates          []predicate.Price
}

// Where adds a new predicate for the builder.
func (pu *PriceUpdate) Where(ps ...predicate.Price) *PriceUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetStartAt sets the start_at field.
func (pu *PriceUpdate) SetStartAt(t time.Time) *PriceUpdate {
	pu.start_at = &t
	return pu
}

// SetEndAt sets the end_at field.
func (pu *PriceUpdate) SetEndAt(t time.Time) *PriceUpdate {
	pu.end_at = &t
	return pu
}

// SetPrice sets the price field.
func (pu *PriceUpdate) SetPrice(u uint16) *PriceUpdate {
	pu.price = &u
	pu.addprice = nil
	return pu
}

// AddPrice adds u to price.
func (pu *PriceUpdate) AddPrice(u uint16) *PriceUpdate {
	if pu.addprice == nil {
		pu.addprice = &u
	} else {
		*pu.addprice += u
	}
	return pu
}

// SetDiscount sets the discount field.
func (pu *PriceUpdate) SetDiscount(u uint16) *PriceUpdate {
	pu.discount = &u
	pu.adddiscount = nil
	return pu
}

// AddDiscount adds u to discount.
func (pu *PriceUpdate) AddDiscount(u uint16) *PriceUpdate {
	if pu.adddiscount == nil {
		pu.adddiscount = &u
	} else {
		*pu.adddiscount += u
	}
	return pu
}

// SetProductsID sets the products edge to Product by id.
func (pu *PriceUpdate) SetProductsID(id int) *PriceUpdate {
	if pu.products == nil {
		pu.products = make(map[int]struct{})
	}
	pu.products[id] = struct{}{}
	return pu
}

// SetNillableProductsID sets the products edge to Product by id if the given value is not nil.
func (pu *PriceUpdate) SetNillableProductsID(id *int) *PriceUpdate {
	if id != nil {
		pu = pu.SetProductsID(*id)
	}
	return pu
}

// SetProducts sets the products edge to Product.
func (pu *PriceUpdate) SetProducts(p *Product) *PriceUpdate {
	return pu.SetProductsID(p.ID)
}

// SetThirdPartiesID sets the third_parties edge to ThirdParty by id.
func (pu *PriceUpdate) SetThirdPartiesID(id int) *PriceUpdate {
	if pu.third_parties == nil {
		pu.third_parties = make(map[int]struct{})
	}
	pu.third_parties[id] = struct{}{}
	return pu
}

// SetNillableThirdPartiesID sets the third_parties edge to ThirdParty by id if the given value is not nil.
func (pu *PriceUpdate) SetNillableThirdPartiesID(id *int) *PriceUpdate {
	if id != nil {
		pu = pu.SetThirdPartiesID(*id)
	}
	return pu
}

// SetThirdParties sets the third_parties edge to ThirdParty.
func (pu *PriceUpdate) SetThirdParties(t *ThirdParty) *PriceUpdate {
	return pu.SetThirdPartiesID(t.ID)
}

// SetPlansID sets the plans edge to Plan by id.
func (pu *PriceUpdate) SetPlansID(id int) *PriceUpdate {
	if pu.plans == nil {
		pu.plans = make(map[int]struct{})
	}
	pu.plans[id] = struct{}{}
	return pu
}

// SetNillablePlansID sets the plans edge to Plan by id if the given value is not nil.
func (pu *PriceUpdate) SetNillablePlansID(id *int) *PriceUpdate {
	if id != nil {
		pu = pu.SetPlansID(*id)
	}
	return pu
}

// SetPlans sets the plans edge to Plan.
func (pu *PriceUpdate) SetPlans(p *Plan) *PriceUpdate {
	return pu.SetPlansID(p.ID)
}

// ClearProducts clears the products edge to Product.
func (pu *PriceUpdate) ClearProducts() *PriceUpdate {
	pu.clearedProducts = true
	return pu
}

// ClearThirdParties clears the third_parties edge to ThirdParty.
func (pu *PriceUpdate) ClearThirdParties() *PriceUpdate {
	pu.clearedThirdParties = true
	return pu
}

// ClearPlans clears the plans edge to Plan.
func (pu *PriceUpdate) ClearPlans() *PriceUpdate {
	pu.clearedPlans = true
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PriceUpdate) Save(ctx context.Context) (int, error) {
	if len(pu.products) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"products\"")
	}
	if len(pu.third_parties) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"third_parties\"")
	}
	if len(pu.plans) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"plans\"")
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   price.Table,
			Columns: price.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: price.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := pu.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldStartAt,
		})
	}
	if value := pu.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldEndAt,
		})
	}
	if value := pu.price; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldPrice,
		})
	}
	if value := pu.addprice; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldPrice,
		})
	}
	if value := pu.discount; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
	}
	if value := pu.adddiscount; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
	}
	if pu.clearedProducts {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductsTable,
			Columns: []string{price.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.products; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductsTable,
			Columns: []string{price.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.clearedThirdParties {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ThirdPartiesTable,
			Columns: []string{price.ThirdPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: thirdparty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.third_parties; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ThirdPartiesTable,
			Columns: []string{price.ThirdPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: thirdparty.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.clearedPlans {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlansTable,
			Columns: []string{price.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlansTable,
			Columns: []string{price.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PriceUpdateOne is the builder for updating a single Price entity.
type PriceUpdateOne struct {
	config
	id                  int
	start_at            *time.Time
	end_at              *time.Time
	price               *uint16
	addprice            *uint16
	discount            *uint16
	adddiscount         *uint16
	products            map[int]struct{}
	third_parties       map[int]struct{}
	plans               map[int]struct{}
	clearedProducts     bool
	clearedThirdParties bool
	clearedPlans        bool
}

// SetStartAt sets the start_at field.
func (puo *PriceUpdateOne) SetStartAt(t time.Time) *PriceUpdateOne {
	puo.start_at = &t
	return puo
}

// SetEndAt sets the end_at field.
func (puo *PriceUpdateOne) SetEndAt(t time.Time) *PriceUpdateOne {
	puo.end_at = &t
	return puo
}

// SetPrice sets the price field.
func (puo *PriceUpdateOne) SetPrice(u uint16) *PriceUpdateOne {
	puo.price = &u
	puo.addprice = nil
	return puo
}

// AddPrice adds u to price.
func (puo *PriceUpdateOne) AddPrice(u uint16) *PriceUpdateOne {
	if puo.addprice == nil {
		puo.addprice = &u
	} else {
		*puo.addprice += u
	}
	return puo
}

// SetDiscount sets the discount field.
func (puo *PriceUpdateOne) SetDiscount(u uint16) *PriceUpdateOne {
	puo.discount = &u
	puo.adddiscount = nil
	return puo
}

// AddDiscount adds u to discount.
func (puo *PriceUpdateOne) AddDiscount(u uint16) *PriceUpdateOne {
	if puo.adddiscount == nil {
		puo.adddiscount = &u
	} else {
		*puo.adddiscount += u
	}
	return puo
}

// SetProductsID sets the products edge to Product by id.
func (puo *PriceUpdateOne) SetProductsID(id int) *PriceUpdateOne {
	if puo.products == nil {
		puo.products = make(map[int]struct{})
	}
	puo.products[id] = struct{}{}
	return puo
}

// SetNillableProductsID sets the products edge to Product by id if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableProductsID(id *int) *PriceUpdateOne {
	if id != nil {
		puo = puo.SetProductsID(*id)
	}
	return puo
}

// SetProducts sets the products edge to Product.
func (puo *PriceUpdateOne) SetProducts(p *Product) *PriceUpdateOne {
	return puo.SetProductsID(p.ID)
}

// SetThirdPartiesID sets the third_parties edge to ThirdParty by id.
func (puo *PriceUpdateOne) SetThirdPartiesID(id int) *PriceUpdateOne {
	if puo.third_parties == nil {
		puo.third_parties = make(map[int]struct{})
	}
	puo.third_parties[id] = struct{}{}
	return puo
}

// SetNillableThirdPartiesID sets the third_parties edge to ThirdParty by id if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableThirdPartiesID(id *int) *PriceUpdateOne {
	if id != nil {
		puo = puo.SetThirdPartiesID(*id)
	}
	return puo
}

// SetThirdParties sets the third_parties edge to ThirdParty.
func (puo *PriceUpdateOne) SetThirdParties(t *ThirdParty) *PriceUpdateOne {
	return puo.SetThirdPartiesID(t.ID)
}

// SetPlansID sets the plans edge to Plan by id.
func (puo *PriceUpdateOne) SetPlansID(id int) *PriceUpdateOne {
	if puo.plans == nil {
		puo.plans = make(map[int]struct{})
	}
	puo.plans[id] = struct{}{}
	return puo
}

// SetNillablePlansID sets the plans edge to Plan by id if the given value is not nil.
func (puo *PriceUpdateOne) SetNillablePlansID(id *int) *PriceUpdateOne {
	if id != nil {
		puo = puo.SetPlansID(*id)
	}
	return puo
}

// SetPlans sets the plans edge to Plan.
func (puo *PriceUpdateOne) SetPlans(p *Plan) *PriceUpdateOne {
	return puo.SetPlansID(p.ID)
}

// ClearProducts clears the products edge to Product.
func (puo *PriceUpdateOne) ClearProducts() *PriceUpdateOne {
	puo.clearedProducts = true
	return puo
}

// ClearThirdParties clears the third_parties edge to ThirdParty.
func (puo *PriceUpdateOne) ClearThirdParties() *PriceUpdateOne {
	puo.clearedThirdParties = true
	return puo
}

// ClearPlans clears the plans edge to Plan.
func (puo *PriceUpdateOne) ClearPlans() *PriceUpdateOne {
	puo.clearedPlans = true
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PriceUpdateOne) Save(ctx context.Context) (*Price, error) {
	if len(puo.products) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"products\"")
	}
	if len(puo.third_parties) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"third_parties\"")
	}
	if len(puo.plans) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"plans\"")
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriceUpdateOne) SaveX(ctx context.Context) *Price {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *PriceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PriceUpdateOne) sqlSave(ctx context.Context) (pr *Price, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   price.Table,
			Columns: price.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeInt,
				Column: price.FieldID,
			},
		},
	}
	if value := puo.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldStartAt,
		})
	}
	if value := puo.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldEndAt,
		})
	}
	if value := puo.price; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldPrice,
		})
	}
	if value := puo.addprice; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldPrice,
		})
	}
	if value := puo.discount; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
	}
	if value := puo.adddiscount; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
	}
	if puo.clearedProducts {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductsTable,
			Columns: []string{price.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.products; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductsTable,
			Columns: []string{price.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.clearedThirdParties {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ThirdPartiesTable,
			Columns: []string{price.ThirdPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: thirdparty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.third_parties; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ThirdPartiesTable,
			Columns: []string{price.ThirdPartiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: thirdparty.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.clearedPlans {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlansTable,
			Columns: []string{price.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlansTable,
			Columns: []string{price.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pr = &Price{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
