// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
)

// PriceUpdate is the builder for updating Price entities.
type PriceUpdate struct {
	config
	start_at    *time.Time
	end_at      *time.Time
	cost        *uint16
	addcost     *uint16
	discount    *uint16
	adddiscount *uint16
	predicates  []predicate.Price
}

// Where adds a new predicate for the builder.
func (pu *PriceUpdate) Where(ps ...predicate.Price) *PriceUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetStartAt sets the start_at field.
func (pu *PriceUpdate) SetStartAt(t time.Time) *PriceUpdate {
	pu.start_at = &t
	return pu
}

// SetEndAt sets the end_at field.
func (pu *PriceUpdate) SetEndAt(t time.Time) *PriceUpdate {
	pu.end_at = &t
	return pu
}

// SetCost sets the cost field.
func (pu *PriceUpdate) SetCost(u uint16) *PriceUpdate {
	pu.cost = &u
	pu.addcost = nil
	return pu
}

// AddCost adds u to cost.
func (pu *PriceUpdate) AddCost(u uint16) *PriceUpdate {
	if pu.addcost == nil {
		pu.addcost = &u
	} else {
		*pu.addcost += u
	}
	return pu
}

// SetDiscount sets the discount field.
func (pu *PriceUpdate) SetDiscount(u uint16) *PriceUpdate {
	pu.discount = &u
	pu.adddiscount = nil
	return pu
}

// AddDiscount adds u to discount.
func (pu *PriceUpdate) AddDiscount(u uint16) *PriceUpdate {
	if pu.adddiscount == nil {
		pu.adddiscount = &u
	} else {
		*pu.adddiscount += u
	}
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PriceUpdate) Save(ctx context.Context) (int, error) {
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   price.Table,
			Columns: price.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: price.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := pu.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldStartAt,
		})
	}
	if value := pu.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldEndAt,
		})
	}
	if value := pu.cost; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldCost,
		})
	}
	if value := pu.addcost; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldCost,
		})
	}
	if value := pu.discount; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
	}
	if value := pu.adddiscount; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PriceUpdateOne is the builder for updating a single Price entity.
type PriceUpdateOne struct {
	config
	id          int
	start_at    *time.Time
	end_at      *time.Time
	cost        *uint16
	addcost     *uint16
	discount    *uint16
	adddiscount *uint16
}

// SetStartAt sets the start_at field.
func (puo *PriceUpdateOne) SetStartAt(t time.Time) *PriceUpdateOne {
	puo.start_at = &t
	return puo
}

// SetEndAt sets the end_at field.
func (puo *PriceUpdateOne) SetEndAt(t time.Time) *PriceUpdateOne {
	puo.end_at = &t
	return puo
}

// SetCost sets the cost field.
func (puo *PriceUpdateOne) SetCost(u uint16) *PriceUpdateOne {
	puo.cost = &u
	puo.addcost = nil
	return puo
}

// AddCost adds u to cost.
func (puo *PriceUpdateOne) AddCost(u uint16) *PriceUpdateOne {
	if puo.addcost == nil {
		puo.addcost = &u
	} else {
		*puo.addcost += u
	}
	return puo
}

// SetDiscount sets the discount field.
func (puo *PriceUpdateOne) SetDiscount(u uint16) *PriceUpdateOne {
	puo.discount = &u
	puo.adddiscount = nil
	return puo
}

// AddDiscount adds u to discount.
func (puo *PriceUpdateOne) AddDiscount(u uint16) *PriceUpdateOne {
	if puo.adddiscount == nil {
		puo.adddiscount = &u
	} else {
		*puo.adddiscount += u
	}
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PriceUpdateOne) Save(ctx context.Context) (*Price, error) {
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriceUpdateOne) SaveX(ctx context.Context) *Price {
	pr, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pr
}

// Exec executes the query on the entity.
func (puo *PriceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PriceUpdateOne) sqlSave(ctx context.Context) (pr *Price, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   price.Table,
			Columns: price.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeInt,
				Column: price.FieldID,
			},
		},
	}
	if value := puo.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldStartAt,
		})
	}
	if value := puo.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldEndAt,
		})
	}
	if value := puo.cost; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldCost,
		})
	}
	if value := puo.addcost; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldCost,
		})
	}
	if value := puo.discount; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
	}
	if value := puo.adddiscount; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
	}
	pr = &Price{config: puo.config}
	_spec.Assign = pr.assignValues
	_spec.ScanValues = pr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pr, nil
}
