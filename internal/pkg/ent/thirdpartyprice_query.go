// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/plan"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
	"github.com/pepeunlimited/prices/internal/pkg/ent/thirdpartyprice"
)

// ThirdPartyPriceQuery is the builder for querying ThirdPartyPrice entities.
type ThirdPartyPriceQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.ThirdPartyPrice
	// eager-loading edges.
	withPrices *PriceQuery
	withPlans  *PlanQuery
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (tppq *ThirdPartyPriceQuery) Where(ps ...predicate.ThirdPartyPrice) *ThirdPartyPriceQuery {
	tppq.predicates = append(tppq.predicates, ps...)
	return tppq
}

// Limit adds a limit step to the query.
func (tppq *ThirdPartyPriceQuery) Limit(limit int) *ThirdPartyPriceQuery {
	tppq.limit = &limit
	return tppq
}

// Offset adds an offset step to the query.
func (tppq *ThirdPartyPriceQuery) Offset(offset int) *ThirdPartyPriceQuery {
	tppq.offset = &offset
	return tppq
}

// Order adds an order step to the query.
func (tppq *ThirdPartyPriceQuery) Order(o ...Order) *ThirdPartyPriceQuery {
	tppq.order = append(tppq.order, o...)
	return tppq
}

// QueryPrices chains the current query on the prices edge.
func (tppq *ThirdPartyPriceQuery) QueryPrices() *PriceQuery {
	query := &PriceQuery{config: tppq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(thirdpartyprice.Table, thirdpartyprice.FieldID, tppq.sqlQuery()),
		sqlgraph.To(price.Table, price.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, thirdpartyprice.PricesTable, thirdpartyprice.PricesColumn),
	)
	query.sql = sqlgraph.SetNeighbors(tppq.driver.Dialect(), step)
	return query
}

// QueryPlans chains the current query on the plans edge.
func (tppq *ThirdPartyPriceQuery) QueryPlans() *PlanQuery {
	query := &PlanQuery{config: tppq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(thirdpartyprice.Table, thirdpartyprice.FieldID, tppq.sqlQuery()),
		sqlgraph.To(plan.Table, plan.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, thirdpartyprice.PlansTable, thirdpartyprice.PlansColumn),
	)
	query.sql = sqlgraph.SetNeighbors(tppq.driver.Dialect(), step)
	return query
}

// First returns the first ThirdPartyPrice entity in the query. Returns *NotFoundError when no thirdpartyprice was found.
func (tppq *ThirdPartyPriceQuery) First(ctx context.Context) (*ThirdPartyPrice, error) {
	tpps, err := tppq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(tpps) == 0 {
		return nil, &NotFoundError{thirdpartyprice.Label}
	}
	return tpps[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tppq *ThirdPartyPriceQuery) FirstX(ctx context.Context) *ThirdPartyPrice {
	tpp, err := tppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return tpp
}

// FirstID returns the first ThirdPartyPrice id in the query. Returns *NotFoundError when no id was found.
func (tppq *ThirdPartyPriceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tppq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{thirdpartyprice.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (tppq *ThirdPartyPriceQuery) FirstXID(ctx context.Context) int {
	id, err := tppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ThirdPartyPrice entity in the query, returns an error if not exactly one entity was returned.
func (tppq *ThirdPartyPriceQuery) Only(ctx context.Context) (*ThirdPartyPrice, error) {
	tpps, err := tppq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(tpps) {
	case 1:
		return tpps[0], nil
	case 0:
		return nil, &NotFoundError{thirdpartyprice.Label}
	default:
		return nil, &NotSingularError{thirdpartyprice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tppq *ThirdPartyPriceQuery) OnlyX(ctx context.Context) *ThirdPartyPrice {
	tpp, err := tppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return tpp
}

// OnlyID returns the only ThirdPartyPrice id in the query, returns an error if not exactly one id was returned.
func (tppq *ThirdPartyPriceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tppq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{thirdpartyprice.Label}
	default:
		err = &NotSingularError{thirdpartyprice.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (tppq *ThirdPartyPriceQuery) OnlyXID(ctx context.Context) int {
	id, err := tppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ThirdPartyPrices.
func (tppq *ThirdPartyPriceQuery) All(ctx context.Context) ([]*ThirdPartyPrice, error) {
	return tppq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tppq *ThirdPartyPriceQuery) AllX(ctx context.Context) []*ThirdPartyPrice {
	tpps, err := tppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return tpps
}

// IDs executes the query and returns a list of ThirdPartyPrice ids.
func (tppq *ThirdPartyPriceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tppq.Select(thirdpartyprice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tppq *ThirdPartyPriceQuery) IDsX(ctx context.Context) []int {
	ids, err := tppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tppq *ThirdPartyPriceQuery) Count(ctx context.Context) (int, error) {
	return tppq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tppq *ThirdPartyPriceQuery) CountX(ctx context.Context) int {
	count, err := tppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tppq *ThirdPartyPriceQuery) Exist(ctx context.Context) (bool, error) {
	return tppq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tppq *ThirdPartyPriceQuery) ExistX(ctx context.Context) bool {
	exist, err := tppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tppq *ThirdPartyPriceQuery) Clone() *ThirdPartyPriceQuery {
	return &ThirdPartyPriceQuery{
		config:     tppq.config,
		limit:      tppq.limit,
		offset:     tppq.offset,
		order:      append([]Order{}, tppq.order...),
		unique:     append([]string{}, tppq.unique...),
		predicates: append([]predicate.ThirdPartyPrice{}, tppq.predicates...),
		// clone intermediate query.
		sql: tppq.sql.Clone(),
	}
}

//  WithPrices tells the query-builder to eager-loads the nodes that are connected to
// the "prices" edge. The optional arguments used to configure the query builder of the edge.
func (tppq *ThirdPartyPriceQuery) WithPrices(opts ...func(*PriceQuery)) *ThirdPartyPriceQuery {
	query := &PriceQuery{config: tppq.config}
	for _, opt := range opts {
		opt(query)
	}
	tppq.withPrices = query
	return tppq
}

//  WithPlans tells the query-builder to eager-loads the nodes that are connected to
// the "plans" edge. The optional arguments used to configure the query builder of the edge.
func (tppq *ThirdPartyPriceQuery) WithPlans(opts ...func(*PlanQuery)) *ThirdPartyPriceQuery {
	query := &PlanQuery{config: tppq.config}
	for _, opt := range opts {
		opt(query)
	}
	tppq.withPlans = query
	return tppq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		InAppPurchaseSku string `json:"in_app_purchase_sku,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ThirdPartyPrice.Query().
//		GroupBy(thirdpartyprice.FieldInAppPurchaseSku).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tppq *ThirdPartyPriceQuery) GroupBy(field string, fields ...string) *ThirdPartyPriceGroupBy {
	group := &ThirdPartyPriceGroupBy{config: tppq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = tppq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		InAppPurchaseSku string `json:"in_app_purchase_sku,omitempty"`
//	}
//
//	client.ThirdPartyPrice.Query().
//		Select(thirdpartyprice.FieldInAppPurchaseSku).
//		Scan(ctx, &v)
//
func (tppq *ThirdPartyPriceQuery) Select(field string, fields ...string) *ThirdPartyPriceSelect {
	selector := &ThirdPartyPriceSelect{config: tppq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = tppq.sqlQuery()
	return selector
}

func (tppq *ThirdPartyPriceQuery) sqlAll(ctx context.Context) ([]*ThirdPartyPrice, error) {
	var (
		nodes       = []*ThirdPartyPrice{}
		_spec       = tppq.querySpec()
		loadedTypes = [2]bool{
			tppq.withPrices != nil,
			tppq.withPlans != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &ThirdPartyPrice{config: tppq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, tppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tppq.withPrices; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ThirdPartyPrice)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Price(func(s *sql.Selector) {
			s.Where(sql.InValues(thirdpartyprice.PricesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.third_party_price_prices
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "third_party_price_prices" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "third_party_price_prices" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Prices = append(node.Edges.Prices, n)
		}
	}

	if query := tppq.withPlans; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ThirdPartyPrice)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Plan(func(s *sql.Selector) {
			s.Where(sql.InValues(thirdpartyprice.PlansColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.third_party_price_plans
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "third_party_price_plans" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "third_party_price_plans" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Plans = append(node.Edges.Plans, n)
		}
	}

	return nodes, nil
}

func (tppq *ThirdPartyPriceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tppq.querySpec()
	return sqlgraph.CountNodes(ctx, tppq.driver, _spec)
}

func (tppq *ThirdPartyPriceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tppq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (tppq *ThirdPartyPriceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   thirdpartyprice.Table,
			Columns: thirdpartyprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: thirdpartyprice.FieldID,
			},
		},
		From:   tppq.sql,
		Unique: true,
	}
	if ps := tppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tppq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tppq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tppq *ThirdPartyPriceQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(tppq.driver.Dialect())
	t1 := builder.Table(thirdpartyprice.Table)
	selector := builder.Select(t1.Columns(thirdpartyprice.Columns...)...).From(t1)
	if tppq.sql != nil {
		selector = tppq.sql
		selector.Select(selector.Columns(thirdpartyprice.Columns...)...)
	}
	for _, p := range tppq.predicates {
		p(selector)
	}
	for _, p := range tppq.order {
		p(selector)
	}
	if offset := tppq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tppq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ThirdPartyPriceGroupBy is the builder for group-by ThirdPartyPrice entities.
type ThirdPartyPriceGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tppgb *ThirdPartyPriceGroupBy) Aggregate(fns ...Aggregate) *ThirdPartyPriceGroupBy {
	tppgb.fns = append(tppgb.fns, fns...)
	return tppgb
}

// Scan applies the group-by query and scan the result into the given value.
func (tppgb *ThirdPartyPriceGroupBy) Scan(ctx context.Context, v interface{}) error {
	return tppgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tppgb *ThirdPartyPriceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tppgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (tppgb *ThirdPartyPriceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tppgb.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyPriceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tppgb *ThirdPartyPriceGroupBy) StringsX(ctx context.Context) []string {
	v, err := tppgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (tppgb *ThirdPartyPriceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tppgb.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyPriceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tppgb *ThirdPartyPriceGroupBy) IntsX(ctx context.Context) []int {
	v, err := tppgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (tppgb *ThirdPartyPriceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tppgb.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyPriceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tppgb *ThirdPartyPriceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tppgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (tppgb *ThirdPartyPriceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tppgb.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyPriceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tppgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tppgb *ThirdPartyPriceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tppgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tppgb *ThirdPartyPriceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tppgb.sqlQuery().Query()
	if err := tppgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tppgb *ThirdPartyPriceGroupBy) sqlQuery() *sql.Selector {
	selector := tppgb.sql
	columns := make([]string, 0, len(tppgb.fields)+len(tppgb.fns))
	columns = append(columns, tppgb.fields...)
	for _, fn := range tppgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tppgb.fields...)
}

// ThirdPartyPriceSelect is the builder for select fields of ThirdPartyPrice entities.
type ThirdPartyPriceSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (tpps *ThirdPartyPriceSelect) Scan(ctx context.Context, v interface{}) error {
	return tpps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tpps *ThirdPartyPriceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := tpps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (tpps *ThirdPartyPriceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(tpps.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyPriceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tpps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tpps *ThirdPartyPriceSelect) StringsX(ctx context.Context) []string {
	v, err := tpps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (tpps *ThirdPartyPriceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(tpps.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyPriceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tpps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tpps *ThirdPartyPriceSelect) IntsX(ctx context.Context) []int {
	v, err := tpps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (tpps *ThirdPartyPriceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tpps.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyPriceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tpps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tpps *ThirdPartyPriceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := tpps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (tpps *ThirdPartyPriceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tpps.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyPriceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tpps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tpps *ThirdPartyPriceSelect) BoolsX(ctx context.Context) []bool {
	v, err := tpps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tpps *ThirdPartyPriceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tpps.sqlQuery().Query()
	if err := tpps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tpps *ThirdPartyPriceSelect) sqlQuery() sql.Querier {
	selector := tpps.sql
	selector.Select(selector.Columns(tpps.fields...)...)
	return selector
}
