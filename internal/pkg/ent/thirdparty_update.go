// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
	"github.com/pepeunlimited/prices/internal/pkg/ent/thirdparty"
)

// ThirdPartyUpdate is the builder for updating ThirdParty entities.
type ThirdPartyUpdate struct {
	config
	in_app_purchase_sku             *string
	google_billing_service_sku      *string
	cleargoogle_billing_service_sku bool
	start_at                        *time.Time
	end_at                          *time.Time
	prices                          map[int]struct{}
	removedPrices                   map[int]struct{}
	predicates                      []predicate.ThirdParty
}

// Where adds a new predicate for the builder.
func (tpu *ThirdPartyUpdate) Where(ps ...predicate.ThirdParty) *ThirdPartyUpdate {
	tpu.predicates = append(tpu.predicates, ps...)
	return tpu
}

// SetInAppPurchaseSku sets the in_app_purchase_sku field.
func (tpu *ThirdPartyUpdate) SetInAppPurchaseSku(s string) *ThirdPartyUpdate {
	tpu.in_app_purchase_sku = &s
	return tpu
}

// SetGoogleBillingServiceSku sets the google_billing_service_sku field.
func (tpu *ThirdPartyUpdate) SetGoogleBillingServiceSku(s string) *ThirdPartyUpdate {
	tpu.google_billing_service_sku = &s
	return tpu
}

// SetNillableGoogleBillingServiceSku sets the google_billing_service_sku field if the given value is not nil.
func (tpu *ThirdPartyUpdate) SetNillableGoogleBillingServiceSku(s *string) *ThirdPartyUpdate {
	if s != nil {
		tpu.SetGoogleBillingServiceSku(*s)
	}
	return tpu
}

// ClearGoogleBillingServiceSku clears the value of google_billing_service_sku.
func (tpu *ThirdPartyUpdate) ClearGoogleBillingServiceSku() *ThirdPartyUpdate {
	tpu.google_billing_service_sku = nil
	tpu.cleargoogle_billing_service_sku = true
	return tpu
}

// SetStartAt sets the start_at field.
func (tpu *ThirdPartyUpdate) SetStartAt(t time.Time) *ThirdPartyUpdate {
	tpu.start_at = &t
	return tpu
}

// SetEndAt sets the end_at field.
func (tpu *ThirdPartyUpdate) SetEndAt(t time.Time) *ThirdPartyUpdate {
	tpu.end_at = &t
	return tpu
}

// AddPriceIDs adds the prices edge to Price by ids.
func (tpu *ThirdPartyUpdate) AddPriceIDs(ids ...int) *ThirdPartyUpdate {
	if tpu.prices == nil {
		tpu.prices = make(map[int]struct{})
	}
	for i := range ids {
		tpu.prices[ids[i]] = struct{}{}
	}
	return tpu
}

// AddPrices adds the prices edges to Price.
func (tpu *ThirdPartyUpdate) AddPrices(p ...*Price) *ThirdPartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tpu.AddPriceIDs(ids...)
}

// RemovePriceIDs removes the prices edge to Price by ids.
func (tpu *ThirdPartyUpdate) RemovePriceIDs(ids ...int) *ThirdPartyUpdate {
	if tpu.removedPrices == nil {
		tpu.removedPrices = make(map[int]struct{})
	}
	for i := range ids {
		tpu.removedPrices[ids[i]] = struct{}{}
	}
	return tpu
}

// RemovePrices removes prices edges to Price.
func (tpu *ThirdPartyUpdate) RemovePrices(p ...*Price) *ThirdPartyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tpu.RemovePriceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tpu *ThirdPartyUpdate) Save(ctx context.Context) (int, error) {
	if tpu.in_app_purchase_sku != nil {
		if err := thirdparty.InAppPurchaseSkuValidator(*tpu.in_app_purchase_sku); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"in_app_purchase_sku\": %v", err)
		}
	}
	if tpu.google_billing_service_sku != nil {
		if err := thirdparty.GoogleBillingServiceSkuValidator(*tpu.google_billing_service_sku); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"google_billing_service_sku\": %v", err)
		}
	}
	return tpu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *ThirdPartyUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *ThirdPartyUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *ThirdPartyUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tpu *ThirdPartyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   thirdparty.Table,
			Columns: thirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: thirdparty.FieldID,
			},
		},
	}
	if ps := tpu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := tpu.in_app_purchase_sku; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdparty.FieldInAppPurchaseSku,
		})
	}
	if value := tpu.google_billing_service_sku; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdparty.FieldGoogleBillingServiceSku,
		})
	}
	if tpu.cleargoogle_billing_service_sku {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: thirdparty.FieldGoogleBillingServiceSku,
		})
	}
	if value := tpu.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: thirdparty.FieldStartAt,
		})
	}
	if value := tpu.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: thirdparty.FieldEndAt,
		})
	}
	if nodes := tpu.removedPrices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thirdparty.PricesTable,
			Columns: []string{thirdparty.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thirdparty.PricesTable,
			Columns: []string{thirdparty.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ThirdPartyUpdateOne is the builder for updating a single ThirdParty entity.
type ThirdPartyUpdateOne struct {
	config
	id                              int
	in_app_purchase_sku             *string
	google_billing_service_sku      *string
	cleargoogle_billing_service_sku bool
	start_at                        *time.Time
	end_at                          *time.Time
	prices                          map[int]struct{}
	removedPrices                   map[int]struct{}
}

// SetInAppPurchaseSku sets the in_app_purchase_sku field.
func (tpuo *ThirdPartyUpdateOne) SetInAppPurchaseSku(s string) *ThirdPartyUpdateOne {
	tpuo.in_app_purchase_sku = &s
	return tpuo
}

// SetGoogleBillingServiceSku sets the google_billing_service_sku field.
func (tpuo *ThirdPartyUpdateOne) SetGoogleBillingServiceSku(s string) *ThirdPartyUpdateOne {
	tpuo.google_billing_service_sku = &s
	return tpuo
}

// SetNillableGoogleBillingServiceSku sets the google_billing_service_sku field if the given value is not nil.
func (tpuo *ThirdPartyUpdateOne) SetNillableGoogleBillingServiceSku(s *string) *ThirdPartyUpdateOne {
	if s != nil {
		tpuo.SetGoogleBillingServiceSku(*s)
	}
	return tpuo
}

// ClearGoogleBillingServiceSku clears the value of google_billing_service_sku.
func (tpuo *ThirdPartyUpdateOne) ClearGoogleBillingServiceSku() *ThirdPartyUpdateOne {
	tpuo.google_billing_service_sku = nil
	tpuo.cleargoogle_billing_service_sku = true
	return tpuo
}

// SetStartAt sets the start_at field.
func (tpuo *ThirdPartyUpdateOne) SetStartAt(t time.Time) *ThirdPartyUpdateOne {
	tpuo.start_at = &t
	return tpuo
}

// SetEndAt sets the end_at field.
func (tpuo *ThirdPartyUpdateOne) SetEndAt(t time.Time) *ThirdPartyUpdateOne {
	tpuo.end_at = &t
	return tpuo
}

// AddPriceIDs adds the prices edge to Price by ids.
func (tpuo *ThirdPartyUpdateOne) AddPriceIDs(ids ...int) *ThirdPartyUpdateOne {
	if tpuo.prices == nil {
		tpuo.prices = make(map[int]struct{})
	}
	for i := range ids {
		tpuo.prices[ids[i]] = struct{}{}
	}
	return tpuo
}

// AddPrices adds the prices edges to Price.
func (tpuo *ThirdPartyUpdateOne) AddPrices(p ...*Price) *ThirdPartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tpuo.AddPriceIDs(ids...)
}

// RemovePriceIDs removes the prices edge to Price by ids.
func (tpuo *ThirdPartyUpdateOne) RemovePriceIDs(ids ...int) *ThirdPartyUpdateOne {
	if tpuo.removedPrices == nil {
		tpuo.removedPrices = make(map[int]struct{})
	}
	for i := range ids {
		tpuo.removedPrices[ids[i]] = struct{}{}
	}
	return tpuo
}

// RemovePrices removes prices edges to Price.
func (tpuo *ThirdPartyUpdateOne) RemovePrices(p ...*Price) *ThirdPartyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tpuo.RemovePriceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tpuo *ThirdPartyUpdateOne) Save(ctx context.Context) (*ThirdParty, error) {
	if tpuo.in_app_purchase_sku != nil {
		if err := thirdparty.InAppPurchaseSkuValidator(*tpuo.in_app_purchase_sku); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"in_app_purchase_sku\": %v", err)
		}
	}
	if tpuo.google_billing_service_sku != nil {
		if err := thirdparty.GoogleBillingServiceSkuValidator(*tpuo.google_billing_service_sku); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"google_billing_service_sku\": %v", err)
		}
	}
	return tpuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *ThirdPartyUpdateOne) SaveX(ctx context.Context) *ThirdParty {
	tp, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return tp
}

// Exec executes the query on the entity.
func (tpuo *ThirdPartyUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *ThirdPartyUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tpuo *ThirdPartyUpdateOne) sqlSave(ctx context.Context) (tp *ThirdParty, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   thirdparty.Table,
			Columns: thirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  tpuo.id,
				Type:   field.TypeInt,
				Column: thirdparty.FieldID,
			},
		},
	}
	if value := tpuo.in_app_purchase_sku; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdparty.FieldInAppPurchaseSku,
		})
	}
	if value := tpuo.google_billing_service_sku; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdparty.FieldGoogleBillingServiceSku,
		})
	}
	if tpuo.cleargoogle_billing_service_sku {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: thirdparty.FieldGoogleBillingServiceSku,
		})
	}
	if value := tpuo.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: thirdparty.FieldStartAt,
		})
	}
	if value := tpuo.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: thirdparty.FieldEndAt,
		})
	}
	if nodes := tpuo.removedPrices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thirdparty.PricesTable,
			Columns: []string{thirdparty.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thirdparty.PricesTable,
			Columns: []string{thirdparty.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	tp = &ThirdParty{config: tpuo.config}
	_spec.Assign = tp.assignValues
	_spec.ScanValues = tp.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tp, nil
}
