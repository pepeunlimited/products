// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/prices/internal/pkg/ent/thirdparty"
)

// ThirdParty is the model entity for the ThirdParty schema.
type ThirdParty struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InAppPurchaseSku holds the value of the "in_app_purchase_sku" field.
	InAppPurchaseSku string `json:"in_app_purchase_sku,omitempty"`
	// GoogleBillingServiceSku holds the value of the "google_billing_service_sku" field.
	GoogleBillingServiceSku string `json:"google_billing_service_sku,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThirdPartyQuery when eager-loading is set.
	Edges ThirdPartyEdges `json:"edges"`
}

// ThirdPartyEdges holds the relations/edges for other nodes in the graph.
type ThirdPartyEdges struct {
	// Prices holds the value of the prices edge.
	Prices []*Price
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PricesOrErr returns the Prices value or an error if the edge
// was not loaded in eager-loading.
func (e ThirdPartyEdges) PricesOrErr() ([]*Price, error) {
	if e.loadedTypes[0] {
		return e.Prices, nil
	}
	return nil, &NotLoadedError{edge: "prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ThirdParty) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // in_app_purchase_sku
		&sql.NullString{}, // google_billing_service_sku
		&sql.NullTime{},   // start_at
		&sql.NullTime{},   // end_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ThirdParty fields.
func (tp *ThirdParty) assignValues(values ...interface{}) error {
	if m, n := len(values), len(thirdparty.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	tp.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field in_app_purchase_sku", values[0])
	} else if value.Valid {
		tp.InAppPurchaseSku = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field google_billing_service_sku", values[1])
	} else if value.Valid {
		tp.GoogleBillingServiceSku = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field start_at", values[2])
	} else if value.Valid {
		tp.StartAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field end_at", values[3])
	} else if value.Valid {
		tp.EndAt = value.Time
	}
	return nil
}

// QueryPrices queries the prices edge of the ThirdParty.
func (tp *ThirdParty) QueryPrices() *PriceQuery {
	return (&ThirdPartyClient{tp.config}).QueryPrices(tp)
}

// Update returns a builder for updating this ThirdParty.
// Note that, you need to call ThirdParty.Unwrap() before calling this method, if this ThirdParty
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *ThirdParty) Update() *ThirdPartyUpdateOne {
	return (&ThirdPartyClient{tp.config}).UpdateOne(tp)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (tp *ThirdParty) Unwrap() *ThirdParty {
	tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ThirdParty is not a transactional entity")
	}
	tp.config.driver = tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *ThirdParty) String() string {
	var builder strings.Builder
	builder.WriteString("ThirdParty(")
	builder.WriteString(fmt.Sprintf("id=%v", tp.ID))
	builder.WriteString(", in_app_purchase_sku=")
	builder.WriteString(tp.InAppPurchaseSku)
	builder.WriteString(", google_billing_service_sku=")
	builder.WriteString(tp.GoogleBillingServiceSku)
	builder.WriteString(", start_at=")
	builder.WriteString(tp.StartAt.Format(time.ANSIC))
	builder.WriteString(", end_at=")
	builder.WriteString(tp.EndAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ThirdParties is a parsable slice of ThirdParty.
type ThirdParties []*ThirdParty

func (tp ThirdParties) config(cfg config) {
	for _i := range tp {
		tp[_i].config = cfg
	}
}
