// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/products/internal/pkg/ent/plan"
	"github.com/pepeunlimited/products/internal/pkg/ent/subscription"
)

// SubscriptionCreate is the builder for creating a Subscription entity.
type SubscriptionCreate struct {
	config
	user_id  *int64
	start_at *time.Time
	end_at   *time.Time
	plans    map[int]struct{}
}

// SetUserID sets the user_id field.
func (sc *SubscriptionCreate) SetUserID(i int64) *SubscriptionCreate {
	sc.user_id = &i
	return sc
}

// SetStartAt sets the start_at field.
func (sc *SubscriptionCreate) SetStartAt(t time.Time) *SubscriptionCreate {
	sc.start_at = &t
	return sc
}

// SetEndAt sets the end_at field.
func (sc *SubscriptionCreate) SetEndAt(t time.Time) *SubscriptionCreate {
	sc.end_at = &t
	return sc
}

// SetPlansID sets the plans edge to Plan by id.
func (sc *SubscriptionCreate) SetPlansID(id int) *SubscriptionCreate {
	if sc.plans == nil {
		sc.plans = make(map[int]struct{})
	}
	sc.plans[id] = struct{}{}
	return sc
}

// SetNillablePlansID sets the plans edge to Plan by id if the given value is not nil.
func (sc *SubscriptionCreate) SetNillablePlansID(id *int) *SubscriptionCreate {
	if id != nil {
		sc = sc.SetPlansID(*id)
	}
	return sc
}

// SetPlans sets the plans edge to Plan.
func (sc *SubscriptionCreate) SetPlans(p *Plan) *SubscriptionCreate {
	return sc.SetPlansID(p.ID)
}

// Save creates the Subscription in the database.
func (sc *SubscriptionCreate) Save(ctx context.Context) (*Subscription, error) {
	if sc.user_id == nil {
		return nil, errors.New("ent: missing required field \"user_id\"")
	}
	if sc.start_at == nil {
		return nil, errors.New("ent: missing required field \"start_at\"")
	}
	if sc.end_at == nil {
		return nil, errors.New("ent: missing required field \"end_at\"")
	}
	if len(sc.plans) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"plans\"")
	}
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscriptionCreate) SaveX(ctx context.Context) *Subscription {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SubscriptionCreate) sqlSave(ctx context.Context) (*Subscription, error) {
	var (
		s     = &Subscription{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subscription.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subscription.FieldID,
			},
		}
	)
	if value := sc.user_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: subscription.FieldUserID,
		})
		s.UserID = *value
	}
	if value := sc.start_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: subscription.FieldStartAt,
		})
		s.StartAt = *value
	}
	if value := sc.end_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: subscription.FieldEndAt,
		})
		s.EndAt = *value
	}
	if nodes := sc.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlansTable,
			Columns: []string{subscription.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}
