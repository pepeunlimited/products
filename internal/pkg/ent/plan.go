// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/prices/internal/pkg/ent/plan"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TitleI18nID holds the value of the "title_i18n_id" field.
	TitleI18nID int64 `json:"title_i18n_id,omitempty"`
	// PriceID holds the value of the "price_id" field.
	PriceID int64 `json:"price_id,omitempty"`
	// Length holds the value of the "length" field.
	Length uint8 `json:"length,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanQuery when eager-loading is set.
	Edges PlanEdges `json:"edges"`
}

// PlanEdges holds the relations/edges for other nodes in the graph.
type PlanEdges struct {
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*Subscription
	// Prices holds the value of the prices edge.
	Prices []*Price
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[0] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// PricesOrErr returns the Prices value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PricesOrErr() ([]*Price, error) {
	if e.loadedTypes[1] {
		return e.Prices, nil
	}
	return nil, &NotLoadedError{edge: "prices"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // title_i18n_id
		&sql.NullInt64{},  // price_id
		&sql.NullInt64{},  // length
		&sql.NullString{}, // unit
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(values ...interface{}) error {
	if m, n := len(values), len(plan.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pl.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field title_i18n_id", values[0])
	} else if value.Valid {
		pl.TitleI18nID = value.Int64
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field price_id", values[1])
	} else if value.Valid {
		pl.PriceID = value.Int64
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field length", values[2])
	} else if value.Valid {
		pl.Length = uint8(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field unit", values[3])
	} else if value.Valid {
		pl.Unit = value.String
	}
	return nil
}

// QuerySubscriptions queries the subscriptions edge of the Plan.
func (pl *Plan) QuerySubscriptions() *SubscriptionQuery {
	return (&PlanClient{pl.config}).QuerySubscriptions(pl)
}

// QueryPrices queries the prices edge of the Plan.
func (pl *Plan) QueryPrices() *PriceQuery {
	return (&PlanClient{pl.config}).QueryPrices(pl)
}

// Update returns a builder for updating this Plan.
// Note that, you need to call Plan.Unwrap() before calling this method, if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return (&PlanClient{pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", title_i18n_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.TitleI18nID))
	builder.WriteString(", price_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.PriceID))
	builder.WriteString(", length=")
	builder.WriteString(fmt.Sprintf("%v", pl.Length))
	builder.WriteString(", unit=")
	builder.WriteString(pl.Unit)
	builder.WriteByte(')')
	return builder.String()
}

// Plans is a parsable slice of Plan.
type Plans []*Plan

func (pl Plans) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
