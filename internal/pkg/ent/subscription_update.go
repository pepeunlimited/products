// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/plan"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/prices/internal/pkg/ent/subscription"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	user_id      *int64
	adduser_id   *int64
	start_at     *time.Time
	end_at       *time.Time
	plans        map[int]struct{}
	clearedPlans bool
	predicates   []predicate.Subscription
}

// Where adds a new predicate for the builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetUserID sets the user_id field.
func (su *SubscriptionUpdate) SetUserID(i int64) *SubscriptionUpdate {
	su.user_id = &i
	su.adduser_id = nil
	return su
}

// AddUserID adds i to user_id.
func (su *SubscriptionUpdate) AddUserID(i int64) *SubscriptionUpdate {
	if su.adduser_id == nil {
		su.adduser_id = &i
	} else {
		*su.adduser_id += i
	}
	return su
}

// SetStartAt sets the start_at field.
func (su *SubscriptionUpdate) SetStartAt(t time.Time) *SubscriptionUpdate {
	su.start_at = &t
	return su
}

// SetEndAt sets the end_at field.
func (su *SubscriptionUpdate) SetEndAt(t time.Time) *SubscriptionUpdate {
	su.end_at = &t
	return su
}

// SetPlansID sets the plans edge to Plan by id.
func (su *SubscriptionUpdate) SetPlansID(id int) *SubscriptionUpdate {
	if su.plans == nil {
		su.plans = make(map[int]struct{})
	}
	su.plans[id] = struct{}{}
	return su
}

// SetNillablePlansID sets the plans edge to Plan by id if the given value is not nil.
func (su *SubscriptionUpdate) SetNillablePlansID(id *int) *SubscriptionUpdate {
	if id != nil {
		su = su.SetPlansID(*id)
	}
	return su
}

// SetPlans sets the plans edge to Plan.
func (su *SubscriptionUpdate) SetPlans(p *Plan) *SubscriptionUpdate {
	return su.SetPlansID(p.ID)
}

// ClearPlans clears the plans edge to Plan.
func (su *SubscriptionUpdate) ClearPlans() *SubscriptionUpdate {
	su.clearedPlans = true
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	if len(su.plans) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"plans\"")
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscription.Table,
			Columns: subscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subscription.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.user_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: subscription.FieldUserID,
		})
	}
	if value := su.adduser_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: subscription.FieldUserID,
		})
	}
	if value := su.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: subscription.FieldStartAt,
		})
	}
	if value := su.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: subscription.FieldEndAt,
		})
	}
	if su.clearedPlans {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlansTable,
			Columns: []string{subscription.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlansTable,
			Columns: []string{subscription.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	id           int
	user_id      *int64
	adduser_id   *int64
	start_at     *time.Time
	end_at       *time.Time
	plans        map[int]struct{}
	clearedPlans bool
}

// SetUserID sets the user_id field.
func (suo *SubscriptionUpdateOne) SetUserID(i int64) *SubscriptionUpdateOne {
	suo.user_id = &i
	suo.adduser_id = nil
	return suo
}

// AddUserID adds i to user_id.
func (suo *SubscriptionUpdateOne) AddUserID(i int64) *SubscriptionUpdateOne {
	if suo.adduser_id == nil {
		suo.adduser_id = &i
	} else {
		*suo.adduser_id += i
	}
	return suo
}

// SetStartAt sets the start_at field.
func (suo *SubscriptionUpdateOne) SetStartAt(t time.Time) *SubscriptionUpdateOne {
	suo.start_at = &t
	return suo
}

// SetEndAt sets the end_at field.
func (suo *SubscriptionUpdateOne) SetEndAt(t time.Time) *SubscriptionUpdateOne {
	suo.end_at = &t
	return suo
}

// SetPlansID sets the plans edge to Plan by id.
func (suo *SubscriptionUpdateOne) SetPlansID(id int) *SubscriptionUpdateOne {
	if suo.plans == nil {
		suo.plans = make(map[int]struct{})
	}
	suo.plans[id] = struct{}{}
	return suo
}

// SetNillablePlansID sets the plans edge to Plan by id if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillablePlansID(id *int) *SubscriptionUpdateOne {
	if id != nil {
		suo = suo.SetPlansID(*id)
	}
	return suo
}

// SetPlans sets the plans edge to Plan.
func (suo *SubscriptionUpdateOne) SetPlans(p *Plan) *SubscriptionUpdateOne {
	return suo.SetPlansID(p.ID)
}

// ClearPlans clears the plans edge to Plan.
func (suo *SubscriptionUpdateOne) ClearPlans() *SubscriptionUpdateOne {
	suo.clearedPlans = true
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	if len(suo.plans) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"plans\"")
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (s *Subscription, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscription.Table,
			Columns: subscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: subscription.FieldID,
			},
		},
	}
	if value := suo.user_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: subscription.FieldUserID,
		})
	}
	if value := suo.adduser_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: subscription.FieldUserID,
		})
	}
	if value := suo.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: subscription.FieldStartAt,
		})
	}
	if value := suo.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: subscription.FieldEndAt,
		})
	}
	if suo.clearedPlans {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlansTable,
			Columns: []string{subscription.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.PlansTable,
			Columns: []string{subscription.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Subscription{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
