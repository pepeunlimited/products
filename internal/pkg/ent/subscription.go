// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/products/internal/pkg/ent/plan"
	"github.com/pepeunlimited/products/internal/pkg/ent/subscription"
)

// Subscription is the model entity for the Subscription schema.
type Subscription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionQuery when eager-loading is set.
	Edges              SubscriptionEdges `json:"edges"`
	plan_subscriptions *int
}

// SubscriptionEdges holds the relations/edges for other nodes in the graph.
type SubscriptionEdges struct {
	// Plans holds the value of the plans edge.
	Plans *Plan
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlansOrErr returns the Plans value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEdges) PlansOrErr() (*Plan, error) {
	if e.loadedTypes[0] {
		if e.Plans == nil {
			// The edge plans was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Plans, nil
	}
	return nil, &NotLoadedError{edge: "plans"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscription) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // user_id
		&sql.NullTime{},  // start_at
		&sql.NullTime{},  // end_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Subscription) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // plan_subscriptions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscription fields.
func (s *Subscription) assignValues(values ...interface{}) error {
	if m, n := len(values), len(subscription.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field user_id", values[0])
	} else if value.Valid {
		s.UserID = value.Int64
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field start_at", values[1])
	} else if value.Valid {
		s.StartAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field end_at", values[2])
	} else if value.Valid {
		s.EndAt = value.Time
	}
	values = values[3:]
	if len(values) == len(subscription.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field plan_subscriptions", value)
		} else if value.Valid {
			s.plan_subscriptions = new(int)
			*s.plan_subscriptions = int(value.Int64)
		}
	}
	return nil
}

// QueryPlans queries the plans edge of the Subscription.
func (s *Subscription) QueryPlans() *PlanQuery {
	return (&SubscriptionClient{s.config}).QueryPlans(s)
}

// Update returns a builder for updating this Subscription.
// Note that, you need to call Subscription.Unwrap() before calling this method, if this Subscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscription) Update() *SubscriptionUpdateOne {
	return (&SubscriptionClient{s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Subscription) Unwrap() *Subscription {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subscription is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscription) String() string {
	var builder strings.Builder
	builder.WriteString("Subscription(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", start_at=")
	builder.WriteString(s.StartAt.Format(time.ANSIC))
	builder.WriteString(", end_at=")
	builder.WriteString(s.EndAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Subscriptions is a parsable slice of Subscription.
type Subscriptions []*Subscription

func (s Subscriptions) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
