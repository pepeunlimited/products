// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
)

// PriceCreate is the builder for creating a Price entity.
type PriceCreate struct {
	config
	start_at *time.Time
	end_at   *time.Time
	cost     *uint16
	discount *uint16
}

// SetStartAt sets the start_at field.
func (pc *PriceCreate) SetStartAt(t time.Time) *PriceCreate {
	pc.start_at = &t
	return pc
}

// SetEndAt sets the end_at field.
func (pc *PriceCreate) SetEndAt(t time.Time) *PriceCreate {
	pc.end_at = &t
	return pc
}

// SetCost sets the cost field.
func (pc *PriceCreate) SetCost(u uint16) *PriceCreate {
	pc.cost = &u
	return pc
}

// SetDiscount sets the discount field.
func (pc *PriceCreate) SetDiscount(u uint16) *PriceCreate {
	pc.discount = &u
	return pc
}

// Save creates the Price in the database.
func (pc *PriceCreate) Save(ctx context.Context) (*Price, error) {
	if pc.start_at == nil {
		return nil, errors.New("ent: missing required field \"start_at\"")
	}
	if pc.end_at == nil {
		return nil, errors.New("ent: missing required field \"end_at\"")
	}
	if pc.cost == nil {
		return nil, errors.New("ent: missing required field \"cost\"")
	}
	if pc.discount == nil {
		return nil, errors.New("ent: missing required field \"discount\"")
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PriceCreate) SaveX(ctx context.Context) *Price {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PriceCreate) sqlSave(ctx context.Context) (*Price, error) {
	var (
		pr    = &Price{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: price.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: price.FieldID,
			},
		}
	)
	if value := pc.start_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldStartAt,
		})
		pr.StartAt = *value
	}
	if value := pc.end_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldEndAt,
		})
		pr.EndAt = *value
	}
	if value := pc.cost; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldCost,
		})
		pr.Cost = *value
	}
	if value := pc.discount; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
		pr.Discount = *value
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}
