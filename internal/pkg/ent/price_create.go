// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/iapsource"
	"github.com/pepeunlimited/prices/internal/pkg/ent/plan"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
	"github.com/pepeunlimited/prices/internal/pkg/ent/product"
)

// PriceCreate is the builder for creating a Price entity.
type PriceCreate struct {
	config
	start_at   *time.Time
	end_at     *time.Time
	price      *uint16
	discount   *uint16
	products   map[int]struct{}
	iap_source map[int]struct{}
	plans      map[int]struct{}
}

// SetStartAt sets the start_at field.
func (pc *PriceCreate) SetStartAt(t time.Time) *PriceCreate {
	pc.start_at = &t
	return pc
}

// SetEndAt sets the end_at field.
func (pc *PriceCreate) SetEndAt(t time.Time) *PriceCreate {
	pc.end_at = &t
	return pc
}

// SetPrice sets the price field.
func (pc *PriceCreate) SetPrice(u uint16) *PriceCreate {
	pc.price = &u
	return pc
}

// SetDiscount sets the discount field.
func (pc *PriceCreate) SetDiscount(u uint16) *PriceCreate {
	pc.discount = &u
	return pc
}

// SetProductsID sets the products edge to Product by id.
func (pc *PriceCreate) SetProductsID(id int) *PriceCreate {
	if pc.products == nil {
		pc.products = make(map[int]struct{})
	}
	pc.products[id] = struct{}{}
	return pc
}

// SetNillableProductsID sets the products edge to Product by id if the given value is not nil.
func (pc *PriceCreate) SetNillableProductsID(id *int) *PriceCreate {
	if id != nil {
		pc = pc.SetProductsID(*id)
	}
	return pc
}

// SetProducts sets the products edge to Product.
func (pc *PriceCreate) SetProducts(p *Product) *PriceCreate {
	return pc.SetProductsID(p.ID)
}

// SetIapSourceID sets the iap_source edge to IapSource by id.
func (pc *PriceCreate) SetIapSourceID(id int) *PriceCreate {
	if pc.iap_source == nil {
		pc.iap_source = make(map[int]struct{})
	}
	pc.iap_source[id] = struct{}{}
	return pc
}

// SetNillableIapSourceID sets the iap_source edge to IapSource by id if the given value is not nil.
func (pc *PriceCreate) SetNillableIapSourceID(id *int) *PriceCreate {
	if id != nil {
		pc = pc.SetIapSourceID(*id)
	}
	return pc
}

// SetIapSource sets the iap_source edge to IapSource.
func (pc *PriceCreate) SetIapSource(i *IapSource) *PriceCreate {
	return pc.SetIapSourceID(i.ID)
}

// SetPlansID sets the plans edge to Plan by id.
func (pc *PriceCreate) SetPlansID(id int) *PriceCreate {
	if pc.plans == nil {
		pc.plans = make(map[int]struct{})
	}
	pc.plans[id] = struct{}{}
	return pc
}

// SetNillablePlansID sets the plans edge to Plan by id if the given value is not nil.
func (pc *PriceCreate) SetNillablePlansID(id *int) *PriceCreate {
	if id != nil {
		pc = pc.SetPlansID(*id)
	}
	return pc
}

// SetPlans sets the plans edge to Plan.
func (pc *PriceCreate) SetPlans(p *Plan) *PriceCreate {
	return pc.SetPlansID(p.ID)
}

// Save creates the Price in the database.
func (pc *PriceCreate) Save(ctx context.Context) (*Price, error) {
	if pc.start_at == nil {
		return nil, errors.New("ent: missing required field \"start_at\"")
	}
	if pc.end_at == nil {
		return nil, errors.New("ent: missing required field \"end_at\"")
	}
	if pc.price == nil {
		return nil, errors.New("ent: missing required field \"price\"")
	}
	if pc.discount == nil {
		return nil, errors.New("ent: missing required field \"discount\"")
	}
	if len(pc.products) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"products\"")
	}
	if len(pc.iap_source) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"iap_source\"")
	}
	if len(pc.plans) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"plans\"")
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PriceCreate) SaveX(ctx context.Context) *Price {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PriceCreate) sqlSave(ctx context.Context) (*Price, error) {
	var (
		pr    = &Price{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: price.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: price.FieldID,
			},
		}
	)
	if value := pc.start_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldStartAt,
		})
		pr.StartAt = *value
	}
	if value := pc.end_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: price.FieldEndAt,
		})
		pr.EndAt = *value
	}
	if value := pc.price; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldPrice,
		})
		pr.Price = *value
	}
	if value := pc.discount; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint16,
			Value:  *value,
			Column: price.FieldDiscount,
		})
		pr.Discount = *value
	}
	if nodes := pc.products; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductsTable,
			Columns: []string{price.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.iap_source; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.IapSourceTable,
			Columns: []string{price.IapSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: iapsource.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlansTable,
			Columns: []string{price.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}
