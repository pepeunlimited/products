// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
	"github.com/pepeunlimited/prices/internal/pkg/ent/thirdparty"
)

// ThirdPartyQuery is the builder for querying ThirdParty entities.
type ThirdPartyQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.ThirdParty
	// eager-loading edges.
	withPrices *PriceQuery
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (tpq *ThirdPartyQuery) Where(ps ...predicate.ThirdParty) *ThirdPartyQuery {
	tpq.predicates = append(tpq.predicates, ps...)
	return tpq
}

// Limit adds a limit step to the query.
func (tpq *ThirdPartyQuery) Limit(limit int) *ThirdPartyQuery {
	tpq.limit = &limit
	return tpq
}

// Offset adds an offset step to the query.
func (tpq *ThirdPartyQuery) Offset(offset int) *ThirdPartyQuery {
	tpq.offset = &offset
	return tpq
}

// Order adds an order step to the query.
func (tpq *ThirdPartyQuery) Order(o ...Order) *ThirdPartyQuery {
	tpq.order = append(tpq.order, o...)
	return tpq
}

// QueryPrices chains the current query on the prices edge.
func (tpq *ThirdPartyQuery) QueryPrices() *PriceQuery {
	query := &PriceQuery{config: tpq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(thirdparty.Table, thirdparty.FieldID, tpq.sqlQuery()),
		sqlgraph.To(price.Table, price.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, thirdparty.PricesTable, thirdparty.PricesColumn),
	)
	query.sql = sqlgraph.SetNeighbors(tpq.driver.Dialect(), step)
	return query
}

// First returns the first ThirdParty entity in the query. Returns *NotFoundError when no thirdparty was found.
func (tpq *ThirdPartyQuery) First(ctx context.Context) (*ThirdParty, error) {
	tps, err := tpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(tps) == 0 {
		return nil, &NotFoundError{thirdparty.Label}
	}
	return tps[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tpq *ThirdPartyQuery) FirstX(ctx context.Context) *ThirdParty {
	tp, err := tpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return tp
}

// FirstID returns the first ThirdParty id in the query. Returns *NotFoundError when no id was found.
func (tpq *ThirdPartyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{thirdparty.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (tpq *ThirdPartyQuery) FirstXID(ctx context.Context) int {
	id, err := tpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only ThirdParty entity in the query, returns an error if not exactly one entity was returned.
func (tpq *ThirdPartyQuery) Only(ctx context.Context) (*ThirdParty, error) {
	tps, err := tpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(tps) {
	case 1:
		return tps[0], nil
	case 0:
		return nil, &NotFoundError{thirdparty.Label}
	default:
		return nil, &NotSingularError{thirdparty.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tpq *ThirdPartyQuery) OnlyX(ctx context.Context) *ThirdParty {
	tp, err := tpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return tp
}

// OnlyID returns the only ThirdParty id in the query, returns an error if not exactly one id was returned.
func (tpq *ThirdPartyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{thirdparty.Label}
	default:
		err = &NotSingularError{thirdparty.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (tpq *ThirdPartyQuery) OnlyXID(ctx context.Context) int {
	id, err := tpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ThirdParties.
func (tpq *ThirdPartyQuery) All(ctx context.Context) ([]*ThirdParty, error) {
	return tpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (tpq *ThirdPartyQuery) AllX(ctx context.Context) []*ThirdParty {
	tps, err := tpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return tps
}

// IDs executes the query and returns a list of ThirdParty ids.
func (tpq *ThirdPartyQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := tpq.Select(thirdparty.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tpq *ThirdPartyQuery) IDsX(ctx context.Context) []int {
	ids, err := tpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tpq *ThirdPartyQuery) Count(ctx context.Context) (int, error) {
	return tpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (tpq *ThirdPartyQuery) CountX(ctx context.Context) int {
	count, err := tpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tpq *ThirdPartyQuery) Exist(ctx context.Context) (bool, error) {
	return tpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (tpq *ThirdPartyQuery) ExistX(ctx context.Context) bool {
	exist, err := tpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tpq *ThirdPartyQuery) Clone() *ThirdPartyQuery {
	return &ThirdPartyQuery{
		config:     tpq.config,
		limit:      tpq.limit,
		offset:     tpq.offset,
		order:      append([]Order{}, tpq.order...),
		unique:     append([]string{}, tpq.unique...),
		predicates: append([]predicate.ThirdParty{}, tpq.predicates...),
		// clone intermediate query.
		sql: tpq.sql.Clone(),
	}
}

//  WithPrices tells the query-builder to eager-loads the nodes that are connected to
// the "prices" edge. The optional arguments used to configure the query builder of the edge.
func (tpq *ThirdPartyQuery) WithPrices(opts ...func(*PriceQuery)) *ThirdPartyQuery {
	query := &PriceQuery{config: tpq.config}
	for _, opt := range opts {
		opt(query)
	}
	tpq.withPrices = query
	return tpq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		InAppPurchaseSku string `json:"in_app_purchase_sku,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ThirdParty.Query().
//		GroupBy(thirdparty.FieldInAppPurchaseSku).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (tpq *ThirdPartyQuery) GroupBy(field string, fields ...string) *ThirdPartyGroupBy {
	group := &ThirdPartyGroupBy{config: tpq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = tpq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		InAppPurchaseSku string `json:"in_app_purchase_sku,omitempty"`
//	}
//
//	client.ThirdParty.Query().
//		Select(thirdparty.FieldInAppPurchaseSku).
//		Scan(ctx, &v)
//
func (tpq *ThirdPartyQuery) Select(field string, fields ...string) *ThirdPartySelect {
	selector := &ThirdPartySelect{config: tpq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = tpq.sqlQuery()
	return selector
}

func (tpq *ThirdPartyQuery) sqlAll(ctx context.Context) ([]*ThirdParty, error) {
	var (
		nodes       = []*ThirdParty{}
		_spec       = tpq.querySpec()
		loadedTypes = [1]bool{
			tpq.withPrices != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &ThirdParty{config: tpq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, tpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := tpq.withPrices; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ThirdParty)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Price(func(s *sql.Selector) {
			s.Where(sql.InValues(thirdparty.PricesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.third_party_prices
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "third_party_prices" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "third_party_prices" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Prices = append(node.Edges.Prices, n)
		}
	}

	return nodes, nil
}

func (tpq *ThirdPartyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tpq.querySpec()
	return sqlgraph.CountNodes(ctx, tpq.driver, _spec)
}

func (tpq *ThirdPartyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := tpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (tpq *ThirdPartyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   thirdparty.Table,
			Columns: thirdparty.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: thirdparty.FieldID,
			},
		},
		From:   tpq.sql,
		Unique: true,
	}
	if ps := tpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tpq *ThirdPartyQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(tpq.driver.Dialect())
	t1 := builder.Table(thirdparty.Table)
	selector := builder.Select(t1.Columns(thirdparty.Columns...)...).From(t1)
	if tpq.sql != nil {
		selector = tpq.sql
		selector.Select(selector.Columns(thirdparty.Columns...)...)
	}
	for _, p := range tpq.predicates {
		p(selector)
	}
	for _, p := range tpq.order {
		p(selector)
	}
	if offset := tpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ThirdPartyGroupBy is the builder for group-by ThirdParty entities.
type ThirdPartyGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tpgb *ThirdPartyGroupBy) Aggregate(fns ...Aggregate) *ThirdPartyGroupBy {
	tpgb.fns = append(tpgb.fns, fns...)
	return tpgb
}

// Scan applies the group-by query and scan the result into the given value.
func (tpgb *ThirdPartyGroupBy) Scan(ctx context.Context, v interface{}) error {
	return tpgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tpgb *ThirdPartyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := tpgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (tpgb *ThirdPartyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(tpgb.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := tpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tpgb *ThirdPartyGroupBy) StringsX(ctx context.Context) []string {
	v, err := tpgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (tpgb *ThirdPartyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(tpgb.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := tpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tpgb *ThirdPartyGroupBy) IntsX(ctx context.Context) []int {
	v, err := tpgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (tpgb *ThirdPartyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(tpgb.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := tpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tpgb *ThirdPartyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := tpgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (tpgb *ThirdPartyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(tpgb.fields) > 1 {
		return nil, errors.New("ent: ThirdPartyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := tpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tpgb *ThirdPartyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := tpgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tpgb *ThirdPartyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tpgb.sqlQuery().Query()
	if err := tpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tpgb *ThirdPartyGroupBy) sqlQuery() *sql.Selector {
	selector := tpgb.sql
	columns := make([]string, 0, len(tpgb.fields)+len(tpgb.fns))
	columns = append(columns, tpgb.fields...)
	for _, fn := range tpgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(tpgb.fields...)
}

// ThirdPartySelect is the builder for select fields of ThirdParty entities.
type ThirdPartySelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (tps *ThirdPartySelect) Scan(ctx context.Context, v interface{}) error {
	return tps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (tps *ThirdPartySelect) ScanX(ctx context.Context, v interface{}) {
	if err := tps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (tps *ThirdPartySelect) Strings(ctx context.Context) ([]string, error) {
	if len(tps.fields) > 1 {
		return nil, errors.New("ent: ThirdPartySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := tps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (tps *ThirdPartySelect) StringsX(ctx context.Context) []string {
	v, err := tps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (tps *ThirdPartySelect) Ints(ctx context.Context) ([]int, error) {
	if len(tps.fields) > 1 {
		return nil, errors.New("ent: ThirdPartySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := tps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (tps *ThirdPartySelect) IntsX(ctx context.Context) []int {
	v, err := tps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (tps *ThirdPartySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(tps.fields) > 1 {
		return nil, errors.New("ent: ThirdPartySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := tps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (tps *ThirdPartySelect) Float64sX(ctx context.Context) []float64 {
	v, err := tps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (tps *ThirdPartySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(tps.fields) > 1 {
		return nil, errors.New("ent: ThirdPartySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := tps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (tps *ThirdPartySelect) BoolsX(ctx context.Context) []bool {
	v, err := tps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tps *ThirdPartySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := tps.sqlQuery().Query()
	if err := tps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (tps *ThirdPartySelect) sqlQuery() sql.Querier {
	selector := tps.sql
	selector.Select(selector.Columns(tps.fields...)...)
	return selector
}
