// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
	"github.com/pepeunlimited/prices/internal/pkg/ent/thirdparty"
)

// ThirdPartyCreate is the builder for creating a ThirdParty entity.
type ThirdPartyCreate struct {
	config
	in_app_purchase_sku        *string
	google_billing_service_sku *string
	start_at                   *time.Time
	end_at                     *time.Time
	prices                     map[int]struct{}
}

// SetInAppPurchaseSku sets the in_app_purchase_sku field.
func (tpc *ThirdPartyCreate) SetInAppPurchaseSku(s string) *ThirdPartyCreate {
	tpc.in_app_purchase_sku = &s
	return tpc
}

// SetGoogleBillingServiceSku sets the google_billing_service_sku field.
func (tpc *ThirdPartyCreate) SetGoogleBillingServiceSku(s string) *ThirdPartyCreate {
	tpc.google_billing_service_sku = &s
	return tpc
}

// SetNillableGoogleBillingServiceSku sets the google_billing_service_sku field if the given value is not nil.
func (tpc *ThirdPartyCreate) SetNillableGoogleBillingServiceSku(s *string) *ThirdPartyCreate {
	if s != nil {
		tpc.SetGoogleBillingServiceSku(*s)
	}
	return tpc
}

// SetStartAt sets the start_at field.
func (tpc *ThirdPartyCreate) SetStartAt(t time.Time) *ThirdPartyCreate {
	tpc.start_at = &t
	return tpc
}

// SetEndAt sets the end_at field.
func (tpc *ThirdPartyCreate) SetEndAt(t time.Time) *ThirdPartyCreate {
	tpc.end_at = &t
	return tpc
}

// AddPriceIDs adds the prices edge to Price by ids.
func (tpc *ThirdPartyCreate) AddPriceIDs(ids ...int) *ThirdPartyCreate {
	if tpc.prices == nil {
		tpc.prices = make(map[int]struct{})
	}
	for i := range ids {
		tpc.prices[ids[i]] = struct{}{}
	}
	return tpc
}

// AddPrices adds the prices edges to Price.
func (tpc *ThirdPartyCreate) AddPrices(p ...*Price) *ThirdPartyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tpc.AddPriceIDs(ids...)
}

// Save creates the ThirdParty in the database.
func (tpc *ThirdPartyCreate) Save(ctx context.Context) (*ThirdParty, error) {
	if tpc.in_app_purchase_sku == nil {
		return nil, errors.New("ent: missing required field \"in_app_purchase_sku\"")
	}
	if err := thirdparty.InAppPurchaseSkuValidator(*tpc.in_app_purchase_sku); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"in_app_purchase_sku\": %v", err)
	}
	if tpc.google_billing_service_sku != nil {
		if err := thirdparty.GoogleBillingServiceSkuValidator(*tpc.google_billing_service_sku); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"google_billing_service_sku\": %v", err)
		}
	}
	if tpc.start_at == nil {
		return nil, errors.New("ent: missing required field \"start_at\"")
	}
	if tpc.end_at == nil {
		return nil, errors.New("ent: missing required field \"end_at\"")
	}
	return tpc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *ThirdPartyCreate) SaveX(ctx context.Context) *ThirdParty {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tpc *ThirdPartyCreate) sqlSave(ctx context.Context) (*ThirdParty, error) {
	var (
		tp    = &ThirdParty{config: tpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: thirdparty.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: thirdparty.FieldID,
			},
		}
	)
	if value := tpc.in_app_purchase_sku; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdparty.FieldInAppPurchaseSku,
		})
		tp.InAppPurchaseSku = *value
	}
	if value := tpc.google_billing_service_sku; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdparty.FieldGoogleBillingServiceSku,
		})
		tp.GoogleBillingServiceSku = *value
	}
	if value := tpc.start_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: thirdparty.FieldStartAt,
		})
		tp.StartAt = *value
	}
	if value := tpc.end_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: thirdparty.FieldEndAt,
		})
		tp.EndAt = *value
	}
	if nodes := tpc.prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thirdparty.PricesTable,
			Columns: []string{thirdparty.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	tp.ID = int(id)
	return tp, nil
}
