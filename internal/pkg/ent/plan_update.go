// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/plan"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
	"github.com/pepeunlimited/prices/internal/pkg/ent/subscription"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	title_i18n_id        *int64
	addtitle_i18n_id     *int64
	length               *uint8
	addlength            *uint8
	unit                 *string
	subscriptions        map[int]struct{}
	prices               map[int]struct{}
	removedSubscriptions map[int]struct{}
	removedPrices        map[int]struct{}
	predicates           []predicate.Plan
}

// Where adds a new predicate for the builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetTitleI18nID sets the title_i18n_id field.
func (pu *PlanUpdate) SetTitleI18nID(i int64) *PlanUpdate {
	pu.title_i18n_id = &i
	pu.addtitle_i18n_id = nil
	return pu
}

// AddTitleI18nID adds i to title_i18n_id.
func (pu *PlanUpdate) AddTitleI18nID(i int64) *PlanUpdate {
	if pu.addtitle_i18n_id == nil {
		pu.addtitle_i18n_id = &i
	} else {
		*pu.addtitle_i18n_id += i
	}
	return pu
}

// SetLength sets the length field.
func (pu *PlanUpdate) SetLength(u uint8) *PlanUpdate {
	pu.length = &u
	pu.addlength = nil
	return pu
}

// AddLength adds u to length.
func (pu *PlanUpdate) AddLength(u uint8) *PlanUpdate {
	if pu.addlength == nil {
		pu.addlength = &u
	} else {
		*pu.addlength += u
	}
	return pu
}

// SetUnit sets the unit field.
func (pu *PlanUpdate) SetUnit(s string) *PlanUpdate {
	pu.unit = &s
	return pu
}

// AddSubscriptionIDs adds the subscriptions edge to Subscription by ids.
func (pu *PlanUpdate) AddSubscriptionIDs(ids ...int) *PlanUpdate {
	if pu.subscriptions == nil {
		pu.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		pu.subscriptions[ids[i]] = struct{}{}
	}
	return pu
}

// AddSubscriptions adds the subscriptions edges to Subscription.
func (pu *PlanUpdate) AddSubscriptions(s ...*Subscription) *PlanUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSubscriptionIDs(ids...)
}

// AddPriceIDs adds the prices edge to Price by ids.
func (pu *PlanUpdate) AddPriceIDs(ids ...int) *PlanUpdate {
	if pu.prices == nil {
		pu.prices = make(map[int]struct{})
	}
	for i := range ids {
		pu.prices[ids[i]] = struct{}{}
	}
	return pu
}

// AddPrices adds the prices edges to Price.
func (pu *PlanUpdate) AddPrices(p ...*Price) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPriceIDs(ids...)
}

// RemoveSubscriptionIDs removes the subscriptions edge to Subscription by ids.
func (pu *PlanUpdate) RemoveSubscriptionIDs(ids ...int) *PlanUpdate {
	if pu.removedSubscriptions == nil {
		pu.removedSubscriptions = make(map[int]struct{})
	}
	for i := range ids {
		pu.removedSubscriptions[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveSubscriptions removes subscriptions edges to Subscription.
func (pu *PlanUpdate) RemoveSubscriptions(s ...*Subscription) *PlanUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSubscriptionIDs(ids...)
}

// RemovePriceIDs removes the prices edge to Price by ids.
func (pu *PlanUpdate) RemovePriceIDs(ids ...int) *PlanUpdate {
	if pu.removedPrices == nil {
		pu.removedPrices = make(map[int]struct{})
	}
	for i := range ids {
		pu.removedPrices[ids[i]] = struct{}{}
	}
	return pu
}

// RemovePrices removes prices edges to Price.
func (pu *PlanUpdate) RemovePrices(p ...*Price) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePriceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	if pu.unit != nil {
		if err := plan.UnitValidator(*pu.unit); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"unit\": %v", err)
		}
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plan.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := pu.title_i18n_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
	}
	if value := pu.addtitle_i18n_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
	}
	if value := pu.length; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
	}
	if value := pu.addlength; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
	}
	if value := pu.unit; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: plan.FieldUnit,
		})
	}
	if nodes := pu.removedSubscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.subscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.removedPrices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PricesTable,
			Columns: []string{plan.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PricesTable,
			Columns: []string{plan.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	id                   int
	title_i18n_id        *int64
	addtitle_i18n_id     *int64
	length               *uint8
	addlength            *uint8
	unit                 *string
	subscriptions        map[int]struct{}
	prices               map[int]struct{}
	removedSubscriptions map[int]struct{}
	removedPrices        map[int]struct{}
}

// SetTitleI18nID sets the title_i18n_id field.
func (puo *PlanUpdateOne) SetTitleI18nID(i int64) *PlanUpdateOne {
	puo.title_i18n_id = &i
	puo.addtitle_i18n_id = nil
	return puo
}

// AddTitleI18nID adds i to title_i18n_id.
func (puo *PlanUpdateOne) AddTitleI18nID(i int64) *PlanUpdateOne {
	if puo.addtitle_i18n_id == nil {
		puo.addtitle_i18n_id = &i
	} else {
		*puo.addtitle_i18n_id += i
	}
	return puo
}

// SetLength sets the length field.
func (puo *PlanUpdateOne) SetLength(u uint8) *PlanUpdateOne {
	puo.length = &u
	puo.addlength = nil
	return puo
}

// AddLength adds u to length.
func (puo *PlanUpdateOne) AddLength(u uint8) *PlanUpdateOne {
	if puo.addlength == nil {
		puo.addlength = &u
	} else {
		*puo.addlength += u
	}
	return puo
}

// SetUnit sets the unit field.
func (puo *PlanUpdateOne) SetUnit(s string) *PlanUpdateOne {
	puo.unit = &s
	return puo
}

// AddSubscriptionIDs adds the subscriptions edge to Subscription by ids.
func (puo *PlanUpdateOne) AddSubscriptionIDs(ids ...int) *PlanUpdateOne {
	if puo.subscriptions == nil {
		puo.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		puo.subscriptions[ids[i]] = struct{}{}
	}
	return puo
}

// AddSubscriptions adds the subscriptions edges to Subscription.
func (puo *PlanUpdateOne) AddSubscriptions(s ...*Subscription) *PlanUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSubscriptionIDs(ids...)
}

// AddPriceIDs adds the prices edge to Price by ids.
func (puo *PlanUpdateOne) AddPriceIDs(ids ...int) *PlanUpdateOne {
	if puo.prices == nil {
		puo.prices = make(map[int]struct{})
	}
	for i := range ids {
		puo.prices[ids[i]] = struct{}{}
	}
	return puo
}

// AddPrices adds the prices edges to Price.
func (puo *PlanUpdateOne) AddPrices(p ...*Price) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPriceIDs(ids...)
}

// RemoveSubscriptionIDs removes the subscriptions edge to Subscription by ids.
func (puo *PlanUpdateOne) RemoveSubscriptionIDs(ids ...int) *PlanUpdateOne {
	if puo.removedSubscriptions == nil {
		puo.removedSubscriptions = make(map[int]struct{})
	}
	for i := range ids {
		puo.removedSubscriptions[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveSubscriptions removes subscriptions edges to Subscription.
func (puo *PlanUpdateOne) RemoveSubscriptions(s ...*Subscription) *PlanUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSubscriptionIDs(ids...)
}

// RemovePriceIDs removes the prices edge to Price by ids.
func (puo *PlanUpdateOne) RemovePriceIDs(ids ...int) *PlanUpdateOne {
	if puo.removedPrices == nil {
		puo.removedPrices = make(map[int]struct{})
	}
	for i := range ids {
		puo.removedPrices[ids[i]] = struct{}{}
	}
	return puo
}

// RemovePrices removes prices edges to Price.
func (puo *PlanUpdateOne) RemovePrices(p ...*Price) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePriceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	if puo.unit != nil {
		if err := plan.UnitValidator(*puo.unit); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"unit\": %v", err)
		}
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	pl, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pl
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (pl *Plan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeInt,
				Column: plan.FieldID,
			},
		},
	}
	if value := puo.title_i18n_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
	}
	if value := puo.addtitle_i18n_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
	}
	if value := puo.length; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
	}
	if value := puo.addlength; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
	}
	if value := puo.unit; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: plan.FieldUnit,
		})
	}
	if nodes := puo.removedSubscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.subscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.removedPrices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PricesTable,
			Columns: []string{plan.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PricesTable,
			Columns: []string{plan.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pl = &Plan{config: puo.config}
	_spec.Assign = pl.assignValues
	_spec.ScanValues = pl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pl, nil
}
