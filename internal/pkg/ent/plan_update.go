// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/products/internal/pkg/ent/plan"
	"github.com/pepeunlimited/products/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/products/internal/pkg/ent/product"
	"github.com/pepeunlimited/products/internal/pkg/ent/subscription"
	"github.com/pepeunlimited/products/internal/pkg/ent/thirdpartyprice"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	title_i18n_id           *int64
	addtitle_i18n_id        *int64
	length                  *uint8
	addlength               *uint8
	start_at                *time.Time
	end_at                  *time.Time
	price                   *int64
	addprice                *int64
	discount                *int64
	adddiscount             *int64
	unit                    *string
	subscriptions           map[int]struct{}
	products                map[int]struct{}
	third_party_prices      map[int]struct{}
	removedSubscriptions    map[int]struct{}
	clearedProducts         bool
	clearedThirdPartyPrices bool
	predicates              []predicate.Plan
}

// Where adds a new predicate for the builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetTitleI18nID sets the title_i18n_id field.
func (pu *PlanUpdate) SetTitleI18nID(i int64) *PlanUpdate {
	pu.title_i18n_id = &i
	pu.addtitle_i18n_id = nil
	return pu
}

// AddTitleI18nID adds i to title_i18n_id.
func (pu *PlanUpdate) AddTitleI18nID(i int64) *PlanUpdate {
	if pu.addtitle_i18n_id == nil {
		pu.addtitle_i18n_id = &i
	} else {
		*pu.addtitle_i18n_id += i
	}
	return pu
}

// SetLength sets the length field.
func (pu *PlanUpdate) SetLength(u uint8) *PlanUpdate {
	pu.length = &u
	pu.addlength = nil
	return pu
}

// AddLength adds u to length.
func (pu *PlanUpdate) AddLength(u uint8) *PlanUpdate {
	if pu.addlength == nil {
		pu.addlength = &u
	} else {
		*pu.addlength += u
	}
	return pu
}

// SetStartAt sets the start_at field.
func (pu *PlanUpdate) SetStartAt(t time.Time) *PlanUpdate {
	pu.start_at = &t
	return pu
}

// SetEndAt sets the end_at field.
func (pu *PlanUpdate) SetEndAt(t time.Time) *PlanUpdate {
	pu.end_at = &t
	return pu
}

// SetPrice sets the price field.
func (pu *PlanUpdate) SetPrice(i int64) *PlanUpdate {
	pu.price = &i
	pu.addprice = nil
	return pu
}

// AddPrice adds i to price.
func (pu *PlanUpdate) AddPrice(i int64) *PlanUpdate {
	if pu.addprice == nil {
		pu.addprice = &i
	} else {
		*pu.addprice += i
	}
	return pu
}

// SetDiscount sets the discount field.
func (pu *PlanUpdate) SetDiscount(i int64) *PlanUpdate {
	pu.discount = &i
	pu.adddiscount = nil
	return pu
}

// AddDiscount adds i to discount.
func (pu *PlanUpdate) AddDiscount(i int64) *PlanUpdate {
	if pu.adddiscount == nil {
		pu.adddiscount = &i
	} else {
		*pu.adddiscount += i
	}
	return pu
}

// SetUnit sets the unit field.
func (pu *PlanUpdate) SetUnit(s string) *PlanUpdate {
	pu.unit = &s
	return pu
}

// AddSubscriptionIDs adds the subscriptions edge to Subscription by ids.
func (pu *PlanUpdate) AddSubscriptionIDs(ids ...int) *PlanUpdate {
	if pu.subscriptions == nil {
		pu.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		pu.subscriptions[ids[i]] = struct{}{}
	}
	return pu
}

// AddSubscriptions adds the subscriptions edges to Subscription.
func (pu *PlanUpdate) AddSubscriptions(s ...*Subscription) *PlanUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSubscriptionIDs(ids...)
}

// SetProductsID sets the products edge to Product by id.
func (pu *PlanUpdate) SetProductsID(id int) *PlanUpdate {
	if pu.products == nil {
		pu.products = make(map[int]struct{})
	}
	pu.products[id] = struct{}{}
	return pu
}

// SetNillableProductsID sets the products edge to Product by id if the given value is not nil.
func (pu *PlanUpdate) SetNillableProductsID(id *int) *PlanUpdate {
	if id != nil {
		pu = pu.SetProductsID(*id)
	}
	return pu
}

// SetProducts sets the products edge to Product.
func (pu *PlanUpdate) SetProducts(p *Product) *PlanUpdate {
	return pu.SetProductsID(p.ID)
}

// SetThirdPartyPricesID sets the third_party_prices edge to ThirdPartyPrice by id.
func (pu *PlanUpdate) SetThirdPartyPricesID(id int) *PlanUpdate {
	if pu.third_party_prices == nil {
		pu.third_party_prices = make(map[int]struct{})
	}
	pu.third_party_prices[id] = struct{}{}
	return pu
}

// SetNillableThirdPartyPricesID sets the third_party_prices edge to ThirdPartyPrice by id if the given value is not nil.
func (pu *PlanUpdate) SetNillableThirdPartyPricesID(id *int) *PlanUpdate {
	if id != nil {
		pu = pu.SetThirdPartyPricesID(*id)
	}
	return pu
}

// SetThirdPartyPrices sets the third_party_prices edge to ThirdPartyPrice.
func (pu *PlanUpdate) SetThirdPartyPrices(t *ThirdPartyPrice) *PlanUpdate {
	return pu.SetThirdPartyPricesID(t.ID)
}

// RemoveSubscriptionIDs removes the subscriptions edge to Subscription by ids.
func (pu *PlanUpdate) RemoveSubscriptionIDs(ids ...int) *PlanUpdate {
	if pu.removedSubscriptions == nil {
		pu.removedSubscriptions = make(map[int]struct{})
	}
	for i := range ids {
		pu.removedSubscriptions[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveSubscriptions removes subscriptions edges to Subscription.
func (pu *PlanUpdate) RemoveSubscriptions(s ...*Subscription) *PlanUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSubscriptionIDs(ids...)
}

// ClearProducts clears the products edge to Product.
func (pu *PlanUpdate) ClearProducts() *PlanUpdate {
	pu.clearedProducts = true
	return pu
}

// ClearThirdPartyPrices clears the third_party_prices edge to ThirdPartyPrice.
func (pu *PlanUpdate) ClearThirdPartyPrices() *PlanUpdate {
	pu.clearedThirdPartyPrices = true
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	if pu.unit != nil {
		if err := plan.UnitValidator(*pu.unit); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"unit\": %v", err)
		}
	}
	if len(pu.products) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"products\"")
	}
	if len(pu.third_party_prices) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"third_party_prices\"")
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plan.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := pu.title_i18n_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
	}
	if value := pu.addtitle_i18n_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
	}
	if value := pu.length; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
	}
	if value := pu.addlength; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
	}
	if value := pu.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: plan.FieldStartAt,
		})
	}
	if value := pu.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: plan.FieldEndAt,
		})
	}
	if value := pu.price; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldPrice,
		})
	}
	if value := pu.addprice; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldPrice,
		})
	}
	if value := pu.discount; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldDiscount,
		})
	}
	if value := pu.adddiscount; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldDiscount,
		})
	}
	if value := pu.unit; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: plan.FieldUnit,
		})
	}
	if nodes := pu.removedSubscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.subscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.clearedProducts {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ProductsTable,
			Columns: []string{plan.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.products; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ProductsTable,
			Columns: []string{plan.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.clearedThirdPartyPrices {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ThirdPartyPricesTable,
			Columns: []string{plan.ThirdPartyPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: thirdpartyprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.third_party_prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ThirdPartyPricesTable,
			Columns: []string{plan.ThirdPartyPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: thirdpartyprice.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	id                      int
	title_i18n_id           *int64
	addtitle_i18n_id        *int64
	length                  *uint8
	addlength               *uint8
	start_at                *time.Time
	end_at                  *time.Time
	price                   *int64
	addprice                *int64
	discount                *int64
	adddiscount             *int64
	unit                    *string
	subscriptions           map[int]struct{}
	products                map[int]struct{}
	third_party_prices      map[int]struct{}
	removedSubscriptions    map[int]struct{}
	clearedProducts         bool
	clearedThirdPartyPrices bool
}

// SetTitleI18nID sets the title_i18n_id field.
func (puo *PlanUpdateOne) SetTitleI18nID(i int64) *PlanUpdateOne {
	puo.title_i18n_id = &i
	puo.addtitle_i18n_id = nil
	return puo
}

// AddTitleI18nID adds i to title_i18n_id.
func (puo *PlanUpdateOne) AddTitleI18nID(i int64) *PlanUpdateOne {
	if puo.addtitle_i18n_id == nil {
		puo.addtitle_i18n_id = &i
	} else {
		*puo.addtitle_i18n_id += i
	}
	return puo
}

// SetLength sets the length field.
func (puo *PlanUpdateOne) SetLength(u uint8) *PlanUpdateOne {
	puo.length = &u
	puo.addlength = nil
	return puo
}

// AddLength adds u to length.
func (puo *PlanUpdateOne) AddLength(u uint8) *PlanUpdateOne {
	if puo.addlength == nil {
		puo.addlength = &u
	} else {
		*puo.addlength += u
	}
	return puo
}

// SetStartAt sets the start_at field.
func (puo *PlanUpdateOne) SetStartAt(t time.Time) *PlanUpdateOne {
	puo.start_at = &t
	return puo
}

// SetEndAt sets the end_at field.
func (puo *PlanUpdateOne) SetEndAt(t time.Time) *PlanUpdateOne {
	puo.end_at = &t
	return puo
}

// SetPrice sets the price field.
func (puo *PlanUpdateOne) SetPrice(i int64) *PlanUpdateOne {
	puo.price = &i
	puo.addprice = nil
	return puo
}

// AddPrice adds i to price.
func (puo *PlanUpdateOne) AddPrice(i int64) *PlanUpdateOne {
	if puo.addprice == nil {
		puo.addprice = &i
	} else {
		*puo.addprice += i
	}
	return puo
}

// SetDiscount sets the discount field.
func (puo *PlanUpdateOne) SetDiscount(i int64) *PlanUpdateOne {
	puo.discount = &i
	puo.adddiscount = nil
	return puo
}

// AddDiscount adds i to discount.
func (puo *PlanUpdateOne) AddDiscount(i int64) *PlanUpdateOne {
	if puo.adddiscount == nil {
		puo.adddiscount = &i
	} else {
		*puo.adddiscount += i
	}
	return puo
}

// SetUnit sets the unit field.
func (puo *PlanUpdateOne) SetUnit(s string) *PlanUpdateOne {
	puo.unit = &s
	return puo
}

// AddSubscriptionIDs adds the subscriptions edge to Subscription by ids.
func (puo *PlanUpdateOne) AddSubscriptionIDs(ids ...int) *PlanUpdateOne {
	if puo.subscriptions == nil {
		puo.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		puo.subscriptions[ids[i]] = struct{}{}
	}
	return puo
}

// AddSubscriptions adds the subscriptions edges to Subscription.
func (puo *PlanUpdateOne) AddSubscriptions(s ...*Subscription) *PlanUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSubscriptionIDs(ids...)
}

// SetProductsID sets the products edge to Product by id.
func (puo *PlanUpdateOne) SetProductsID(id int) *PlanUpdateOne {
	if puo.products == nil {
		puo.products = make(map[int]struct{})
	}
	puo.products[id] = struct{}{}
	return puo
}

// SetNillableProductsID sets the products edge to Product by id if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableProductsID(id *int) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetProductsID(*id)
	}
	return puo
}

// SetProducts sets the products edge to Product.
func (puo *PlanUpdateOne) SetProducts(p *Product) *PlanUpdateOne {
	return puo.SetProductsID(p.ID)
}

// SetThirdPartyPricesID sets the third_party_prices edge to ThirdPartyPrice by id.
func (puo *PlanUpdateOne) SetThirdPartyPricesID(id int) *PlanUpdateOne {
	if puo.third_party_prices == nil {
		puo.third_party_prices = make(map[int]struct{})
	}
	puo.third_party_prices[id] = struct{}{}
	return puo
}

// SetNillableThirdPartyPricesID sets the third_party_prices edge to ThirdPartyPrice by id if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableThirdPartyPricesID(id *int) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetThirdPartyPricesID(*id)
	}
	return puo
}

// SetThirdPartyPrices sets the third_party_prices edge to ThirdPartyPrice.
func (puo *PlanUpdateOne) SetThirdPartyPrices(t *ThirdPartyPrice) *PlanUpdateOne {
	return puo.SetThirdPartyPricesID(t.ID)
}

// RemoveSubscriptionIDs removes the subscriptions edge to Subscription by ids.
func (puo *PlanUpdateOne) RemoveSubscriptionIDs(ids ...int) *PlanUpdateOne {
	if puo.removedSubscriptions == nil {
		puo.removedSubscriptions = make(map[int]struct{})
	}
	for i := range ids {
		puo.removedSubscriptions[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveSubscriptions removes subscriptions edges to Subscription.
func (puo *PlanUpdateOne) RemoveSubscriptions(s ...*Subscription) *PlanUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSubscriptionIDs(ids...)
}

// ClearProducts clears the products edge to Product.
func (puo *PlanUpdateOne) ClearProducts() *PlanUpdateOne {
	puo.clearedProducts = true
	return puo
}

// ClearThirdPartyPrices clears the third_party_prices edge to ThirdPartyPrice.
func (puo *PlanUpdateOne) ClearThirdPartyPrices() *PlanUpdateOne {
	puo.clearedThirdPartyPrices = true
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	if puo.unit != nil {
		if err := plan.UnitValidator(*puo.unit); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"unit\": %v", err)
		}
	}
	if len(puo.products) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"products\"")
	}
	if len(puo.third_party_prices) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"third_party_prices\"")
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	pl, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pl
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (pl *Plan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeInt,
				Column: plan.FieldID,
			},
		},
	}
	if value := puo.title_i18n_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
	}
	if value := puo.addtitle_i18n_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldTitleI18nID,
		})
	}
	if value := puo.length; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
	}
	if value := puo.addlength; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  *value,
			Column: plan.FieldLength,
		})
	}
	if value := puo.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: plan.FieldStartAt,
		})
	}
	if value := puo.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: plan.FieldEndAt,
		})
	}
	if value := puo.price; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldPrice,
		})
	}
	if value := puo.addprice; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldPrice,
		})
	}
	if value := puo.discount; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldDiscount,
		})
	}
	if value := puo.adddiscount; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: plan.FieldDiscount,
		})
	}
	if value := puo.unit; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: plan.FieldUnit,
		})
	}
	if nodes := puo.removedSubscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.subscriptions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.SubscriptionsTable,
			Columns: []string{plan.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscription.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.clearedProducts {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ProductsTable,
			Columns: []string{plan.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.products; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ProductsTable,
			Columns: []string{plan.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.clearedThirdPartyPrices {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ThirdPartyPricesTable,
			Columns: []string{plan.ThirdPartyPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: thirdpartyprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.third_party_prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ThirdPartyPricesTable,
			Columns: []string{plan.ThirdPartyPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: thirdpartyprice.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pl = &Plan{config: puo.config}
	_spec.Assign = pl.assignValues
	_spec.ScanValues = pl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pl, nil
}
