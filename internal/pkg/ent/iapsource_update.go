// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/prices/internal/pkg/ent/iapsource"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
	"github.com/pepeunlimited/prices/internal/pkg/ent/price"
)

// IapSourceUpdate is the builder for updating IapSource entities.
type IapSourceUpdate struct {
	config
	in_app_purchase_sku             *string
	google_billing_service_sku      *string
	cleargoogle_billing_service_sku bool
	start_at                        *time.Time
	end_at                          *time.Time
	prices                          map[int]struct{}
	removedPrices                   map[int]struct{}
	predicates                      []predicate.IapSource
}

// Where adds a new predicate for the builder.
func (isu *IapSourceUpdate) Where(ps ...predicate.IapSource) *IapSourceUpdate {
	isu.predicates = append(isu.predicates, ps...)
	return isu
}

// SetInAppPurchaseSku sets the in_app_purchase_sku field.
func (isu *IapSourceUpdate) SetInAppPurchaseSku(s string) *IapSourceUpdate {
	isu.in_app_purchase_sku = &s
	return isu
}

// SetGoogleBillingServiceSku sets the google_billing_service_sku field.
func (isu *IapSourceUpdate) SetGoogleBillingServiceSku(s string) *IapSourceUpdate {
	isu.google_billing_service_sku = &s
	return isu
}

// SetNillableGoogleBillingServiceSku sets the google_billing_service_sku field if the given value is not nil.
func (isu *IapSourceUpdate) SetNillableGoogleBillingServiceSku(s *string) *IapSourceUpdate {
	if s != nil {
		isu.SetGoogleBillingServiceSku(*s)
	}
	return isu
}

// ClearGoogleBillingServiceSku clears the value of google_billing_service_sku.
func (isu *IapSourceUpdate) ClearGoogleBillingServiceSku() *IapSourceUpdate {
	isu.google_billing_service_sku = nil
	isu.cleargoogle_billing_service_sku = true
	return isu
}

// SetStartAt sets the start_at field.
func (isu *IapSourceUpdate) SetStartAt(t time.Time) *IapSourceUpdate {
	isu.start_at = &t
	return isu
}

// SetEndAt sets the end_at field.
func (isu *IapSourceUpdate) SetEndAt(t time.Time) *IapSourceUpdate {
	isu.end_at = &t
	return isu
}

// AddPriceIDs adds the prices edge to Price by ids.
func (isu *IapSourceUpdate) AddPriceIDs(ids ...int) *IapSourceUpdate {
	if isu.prices == nil {
		isu.prices = make(map[int]struct{})
	}
	for i := range ids {
		isu.prices[ids[i]] = struct{}{}
	}
	return isu
}

// AddPrices adds the prices edges to Price.
func (isu *IapSourceUpdate) AddPrices(p ...*Price) *IapSourceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return isu.AddPriceIDs(ids...)
}

// RemovePriceIDs removes the prices edge to Price by ids.
func (isu *IapSourceUpdate) RemovePriceIDs(ids ...int) *IapSourceUpdate {
	if isu.removedPrices == nil {
		isu.removedPrices = make(map[int]struct{})
	}
	for i := range ids {
		isu.removedPrices[ids[i]] = struct{}{}
	}
	return isu
}

// RemovePrices removes prices edges to Price.
func (isu *IapSourceUpdate) RemovePrices(p ...*Price) *IapSourceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return isu.RemovePriceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (isu *IapSourceUpdate) Save(ctx context.Context) (int, error) {
	if isu.in_app_purchase_sku != nil {
		if err := iapsource.InAppPurchaseSkuValidator(*isu.in_app_purchase_sku); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"in_app_purchase_sku\": %v", err)
		}
	}
	if isu.google_billing_service_sku != nil {
		if err := iapsource.GoogleBillingServiceSkuValidator(*isu.google_billing_service_sku); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"google_billing_service_sku\": %v", err)
		}
	}
	return isu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (isu *IapSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := isu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (isu *IapSourceUpdate) Exec(ctx context.Context) error {
	_, err := isu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isu *IapSourceUpdate) ExecX(ctx context.Context) {
	if err := isu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (isu *IapSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   iapsource.Table,
			Columns: iapsource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: iapsource.FieldID,
			},
		},
	}
	if ps := isu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := isu.in_app_purchase_sku; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: iapsource.FieldInAppPurchaseSku,
		})
	}
	if value := isu.google_billing_service_sku; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: iapsource.FieldGoogleBillingServiceSku,
		})
	}
	if isu.cleargoogle_billing_service_sku {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: iapsource.FieldGoogleBillingServiceSku,
		})
	}
	if value := isu.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: iapsource.FieldStartAt,
		})
	}
	if value := isu.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: iapsource.FieldEndAt,
		})
	}
	if nodes := isu.removedPrices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   iapsource.PricesTable,
			Columns: []string{iapsource.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isu.prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   iapsource.PricesTable,
			Columns: []string{iapsource.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, isu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// IapSourceUpdateOne is the builder for updating a single IapSource entity.
type IapSourceUpdateOne struct {
	config
	id                              int
	in_app_purchase_sku             *string
	google_billing_service_sku      *string
	cleargoogle_billing_service_sku bool
	start_at                        *time.Time
	end_at                          *time.Time
	prices                          map[int]struct{}
	removedPrices                   map[int]struct{}
}

// SetInAppPurchaseSku sets the in_app_purchase_sku field.
func (isuo *IapSourceUpdateOne) SetInAppPurchaseSku(s string) *IapSourceUpdateOne {
	isuo.in_app_purchase_sku = &s
	return isuo
}

// SetGoogleBillingServiceSku sets the google_billing_service_sku field.
func (isuo *IapSourceUpdateOne) SetGoogleBillingServiceSku(s string) *IapSourceUpdateOne {
	isuo.google_billing_service_sku = &s
	return isuo
}

// SetNillableGoogleBillingServiceSku sets the google_billing_service_sku field if the given value is not nil.
func (isuo *IapSourceUpdateOne) SetNillableGoogleBillingServiceSku(s *string) *IapSourceUpdateOne {
	if s != nil {
		isuo.SetGoogleBillingServiceSku(*s)
	}
	return isuo
}

// ClearGoogleBillingServiceSku clears the value of google_billing_service_sku.
func (isuo *IapSourceUpdateOne) ClearGoogleBillingServiceSku() *IapSourceUpdateOne {
	isuo.google_billing_service_sku = nil
	isuo.cleargoogle_billing_service_sku = true
	return isuo
}

// SetStartAt sets the start_at field.
func (isuo *IapSourceUpdateOne) SetStartAt(t time.Time) *IapSourceUpdateOne {
	isuo.start_at = &t
	return isuo
}

// SetEndAt sets the end_at field.
func (isuo *IapSourceUpdateOne) SetEndAt(t time.Time) *IapSourceUpdateOne {
	isuo.end_at = &t
	return isuo
}

// AddPriceIDs adds the prices edge to Price by ids.
func (isuo *IapSourceUpdateOne) AddPriceIDs(ids ...int) *IapSourceUpdateOne {
	if isuo.prices == nil {
		isuo.prices = make(map[int]struct{})
	}
	for i := range ids {
		isuo.prices[ids[i]] = struct{}{}
	}
	return isuo
}

// AddPrices adds the prices edges to Price.
func (isuo *IapSourceUpdateOne) AddPrices(p ...*Price) *IapSourceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return isuo.AddPriceIDs(ids...)
}

// RemovePriceIDs removes the prices edge to Price by ids.
func (isuo *IapSourceUpdateOne) RemovePriceIDs(ids ...int) *IapSourceUpdateOne {
	if isuo.removedPrices == nil {
		isuo.removedPrices = make(map[int]struct{})
	}
	for i := range ids {
		isuo.removedPrices[ids[i]] = struct{}{}
	}
	return isuo
}

// RemovePrices removes prices edges to Price.
func (isuo *IapSourceUpdateOne) RemovePrices(p ...*Price) *IapSourceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return isuo.RemovePriceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (isuo *IapSourceUpdateOne) Save(ctx context.Context) (*IapSource, error) {
	if isuo.in_app_purchase_sku != nil {
		if err := iapsource.InAppPurchaseSkuValidator(*isuo.in_app_purchase_sku); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"in_app_purchase_sku\": %v", err)
		}
	}
	if isuo.google_billing_service_sku != nil {
		if err := iapsource.GoogleBillingServiceSkuValidator(*isuo.google_billing_service_sku); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"google_billing_service_sku\": %v", err)
		}
	}
	return isuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (isuo *IapSourceUpdateOne) SaveX(ctx context.Context) *IapSource {
	is, err := isuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return is
}

// Exec executes the query on the entity.
func (isuo *IapSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := isuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isuo *IapSourceUpdateOne) ExecX(ctx context.Context) {
	if err := isuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (isuo *IapSourceUpdateOne) sqlSave(ctx context.Context) (is *IapSource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   iapsource.Table,
			Columns: iapsource.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  isuo.id,
				Type:   field.TypeInt,
				Column: iapsource.FieldID,
			},
		},
	}
	if value := isuo.in_app_purchase_sku; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: iapsource.FieldInAppPurchaseSku,
		})
	}
	if value := isuo.google_billing_service_sku; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: iapsource.FieldGoogleBillingServiceSku,
		})
	}
	if isuo.cleargoogle_billing_service_sku {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: iapsource.FieldGoogleBillingServiceSku,
		})
	}
	if value := isuo.start_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: iapsource.FieldStartAt,
		})
	}
	if value := isuo.end_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: iapsource.FieldEndAt,
		})
	}
	if nodes := isuo.removedPrices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   iapsource.PricesTable,
			Columns: []string{iapsource.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := isuo.prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   iapsource.PricesTable,
			Columns: []string{iapsource.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	is = &IapSource{config: isuo.config}
	_spec.Assign = is.assignValues
	_spec.ScanValues = is.scanValues()
	if err = sqlgraph.UpdateNode(ctx, isuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return is, nil
}
