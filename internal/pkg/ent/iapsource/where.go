// Code generated by entc, DO NOT EDIT.

package iapsource

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/pepeunlimited/prices/internal/pkg/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// InAppPurchaseSku applies equality check predicate on the "in_app_purchase_sku" field. It's identical to InAppPurchaseSkuEQ.
func InAppPurchaseSku(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInAppPurchaseSku), v))
	})
}

// GoogleBillingServiceSku applies equality check predicate on the "google_billing_service_sku" field. It's identical to GoogleBillingServiceSkuEQ.
func GoogleBillingServiceSku(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// InAppPurchaseSkuEQ applies the EQ predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuEQ(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuNEQ applies the NEQ predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuNEQ(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuIn applies the In predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuIn(vs ...string) predicate.IapSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInAppPurchaseSku), v...))
	})
}

// InAppPurchaseSkuNotIn applies the NotIn predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuNotIn(vs ...string) predicate.IapSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInAppPurchaseSku), v...))
	})
}

// InAppPurchaseSkuGT applies the GT predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuGT(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuGTE applies the GTE predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuGTE(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuLT applies the LT predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuLT(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuLTE applies the LTE predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuLTE(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuContains applies the Contains predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuContains(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuHasPrefix applies the HasPrefix predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuHasPrefix(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuHasSuffix applies the HasSuffix predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuHasSuffix(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuEqualFold applies the EqualFold predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuEqualFold(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInAppPurchaseSku), v))
	})
}

// InAppPurchaseSkuContainsFold applies the ContainsFold predicate on the "in_app_purchase_sku" field.
func InAppPurchaseSkuContainsFold(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInAppPurchaseSku), v))
	})
}

// GoogleBillingServiceSkuEQ applies the EQ predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuEQ(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuNEQ applies the NEQ predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuNEQ(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuIn applies the In predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuIn(vs ...string) predicate.IapSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGoogleBillingServiceSku), v...))
	})
}

// GoogleBillingServiceSkuNotIn applies the NotIn predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuNotIn(vs ...string) predicate.IapSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGoogleBillingServiceSku), v...))
	})
}

// GoogleBillingServiceSkuGT applies the GT predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuGT(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuGTE applies the GTE predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuGTE(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuLT applies the LT predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuLT(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuLTE applies the LTE predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuLTE(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuContains applies the Contains predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuContains(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuHasPrefix applies the HasPrefix predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuHasPrefix(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuHasSuffix applies the HasSuffix predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuHasSuffix(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuIsNil applies the IsNil predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuIsNil() predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGoogleBillingServiceSku)))
	})
}

// GoogleBillingServiceSkuNotNil applies the NotNil predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuNotNil() predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGoogleBillingServiceSku)))
	})
}

// GoogleBillingServiceSkuEqualFold applies the EqualFold predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuEqualFold(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// GoogleBillingServiceSkuContainsFold applies the ContainsFold predicate on the "google_billing_service_sku" field.
func GoogleBillingServiceSkuContainsFold(v string) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoogleBillingServiceSku), v))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.IapSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.IapSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndAt), v))
	})
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.IapSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndAt), v...))
	})
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.IapSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.IapSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndAt), v...))
	})
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndAt), v))
	})
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndAt), v))
	})
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndAt), v))
	})
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndAt), v))
	})
}

// HasPrices applies the HasEdge predicate on the "prices" edge.
func HasPrices() predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PricesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PricesTable, PricesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPricesWith applies the HasEdge predicate on the "prices" edge with a given conditions (other predicates).
func HasPricesWith(preds ...predicate.Price) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PricesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PricesTable, PricesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.IapSource) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.IapSource) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IapSource) predicate.IapSource {
	return predicate.IapSource(func(s *sql.Selector) {
		p(s.Not())
	})
}
