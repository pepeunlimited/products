// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/products/internal/pkg/ent/plan"
	"github.com/pepeunlimited/products/internal/pkg/ent/price"
	"github.com/pepeunlimited/products/internal/pkg/ent/thirdpartyprice"
)

// ThirdPartyPriceCreate is the builder for creating a ThirdPartyPrice entity.
type ThirdPartyPriceCreate struct {
	config
	in_app_purchase_sku        *string
	google_billing_service_sku *string
	start_at                   *time.Time
	end_at                     *time.Time
	_type                      *string
	prices                     map[int]struct{}
	plans                      map[int]struct{}
}

// SetInAppPurchaseSku sets the in_app_purchase_sku field.
func (tppc *ThirdPartyPriceCreate) SetInAppPurchaseSku(s string) *ThirdPartyPriceCreate {
	tppc.in_app_purchase_sku = &s
	return tppc
}

// SetGoogleBillingServiceSku sets the google_billing_service_sku field.
func (tppc *ThirdPartyPriceCreate) SetGoogleBillingServiceSku(s string) *ThirdPartyPriceCreate {
	tppc.google_billing_service_sku = &s
	return tppc
}

// SetNillableGoogleBillingServiceSku sets the google_billing_service_sku field if the given value is not nil.
func (tppc *ThirdPartyPriceCreate) SetNillableGoogleBillingServiceSku(s *string) *ThirdPartyPriceCreate {
	if s != nil {
		tppc.SetGoogleBillingServiceSku(*s)
	}
	return tppc
}

// SetStartAt sets the start_at field.
func (tppc *ThirdPartyPriceCreate) SetStartAt(t time.Time) *ThirdPartyPriceCreate {
	tppc.start_at = &t
	return tppc
}

// SetEndAt sets the end_at field.
func (tppc *ThirdPartyPriceCreate) SetEndAt(t time.Time) *ThirdPartyPriceCreate {
	tppc.end_at = &t
	return tppc
}

// SetType sets the type field.
func (tppc *ThirdPartyPriceCreate) SetType(s string) *ThirdPartyPriceCreate {
	tppc._type = &s
	return tppc
}

// AddPriceIDs adds the prices edge to Price by ids.
func (tppc *ThirdPartyPriceCreate) AddPriceIDs(ids ...int) *ThirdPartyPriceCreate {
	if tppc.prices == nil {
		tppc.prices = make(map[int]struct{})
	}
	for i := range ids {
		tppc.prices[ids[i]] = struct{}{}
	}
	return tppc
}

// AddPrices adds the prices edges to Price.
func (tppc *ThirdPartyPriceCreate) AddPrices(p ...*Price) *ThirdPartyPriceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tppc.AddPriceIDs(ids...)
}

// AddPlanIDs adds the plans edge to Plan by ids.
func (tppc *ThirdPartyPriceCreate) AddPlanIDs(ids ...int) *ThirdPartyPriceCreate {
	if tppc.plans == nil {
		tppc.plans = make(map[int]struct{})
	}
	for i := range ids {
		tppc.plans[ids[i]] = struct{}{}
	}
	return tppc
}

// AddPlans adds the plans edges to Plan.
func (tppc *ThirdPartyPriceCreate) AddPlans(p ...*Plan) *ThirdPartyPriceCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tppc.AddPlanIDs(ids...)
}

// Save creates the ThirdPartyPrice in the database.
func (tppc *ThirdPartyPriceCreate) Save(ctx context.Context) (*ThirdPartyPrice, error) {
	if tppc.in_app_purchase_sku == nil {
		return nil, errors.New("ent: missing required field \"in_app_purchase_sku\"")
	}
	if err := thirdpartyprice.InAppPurchaseSkuValidator(*tppc.in_app_purchase_sku); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"in_app_purchase_sku\": %v", err)
	}
	if tppc.google_billing_service_sku != nil {
		if err := thirdpartyprice.GoogleBillingServiceSkuValidator(*tppc.google_billing_service_sku); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"google_billing_service_sku\": %v", err)
		}
	}
	if tppc.start_at == nil {
		return nil, errors.New("ent: missing required field \"start_at\"")
	}
	if tppc.end_at == nil {
		return nil, errors.New("ent: missing required field \"end_at\"")
	}
	if tppc._type == nil {
		return nil, errors.New("ent: missing required field \"type\"")
	}
	if err := thirdpartyprice.TypeValidator(*tppc._type); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"type\": %v", err)
	}
	return tppc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tppc *ThirdPartyPriceCreate) SaveX(ctx context.Context) *ThirdPartyPrice {
	v, err := tppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tppc *ThirdPartyPriceCreate) sqlSave(ctx context.Context) (*ThirdPartyPrice, error) {
	var (
		tpp   = &ThirdPartyPrice{config: tppc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: thirdpartyprice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: thirdpartyprice.FieldID,
			},
		}
	)
	if value := tppc.in_app_purchase_sku; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdpartyprice.FieldInAppPurchaseSku,
		})
		tpp.InAppPurchaseSku = *value
	}
	if value := tppc.google_billing_service_sku; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdpartyprice.FieldGoogleBillingServiceSku,
		})
		tpp.GoogleBillingServiceSku = *value
	}
	if value := tppc.start_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: thirdpartyprice.FieldStartAt,
		})
		tpp.StartAt = *value
	}
	if value := tppc.end_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: thirdpartyprice.FieldEndAt,
		})
		tpp.EndAt = *value
	}
	if value := tppc._type; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: thirdpartyprice.FieldType,
		})
		tpp.Type = *value
	}
	if nodes := tppc.prices; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thirdpartyprice.PricesTable,
			Columns: []string{thirdpartyprice.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: price.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tppc.plans; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thirdpartyprice.PlansTable,
			Columns: []string{thirdpartyprice.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, tppc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	tpp.ID = int(id)
	return tpp, nil
}
